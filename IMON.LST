  Wed Oct 18 2000 14:10                                                                                                    Page 1

    'W65C134 Internal ROM Monitor ($F000)'
    'Monitor / Program Flow'

                                               ***************************************
                                               **      WDC 65C02 Macro Assembler    **
                                               **                                   **
                                               **     Version 3.11 - Mar 16 2000    **
                                               ***************************************

     1                        	  TTL 'W65C134 Internal ROM Monitor ($F000)'
     2                        
     3                        *        06-23-1993
     4                        
     5                        	 PW 132
     6                        
     7                                 CHIP 65C02
     8                        	 LONGA OFF
     9                        	 LONGI OFF
    10                        	 LEADZERO ON
    11                        	 INCLIST ON
    12                        	 LIST ON
    13                        	 CONDLIST ON
    14                        
    15                        
     1                        	 DATA
     2                        ***************************************************************************
     3                        *                                                                         *
     4                        *              (C) Copyright The Western Design Center                    *
     5                        *                  1988,1989,1990,1991,1992,1993,1994                     *
     6                        *                                                                         *
     7                        *  Program written by:                                                    *
     8                        *       J. Paul Hittel, L. A. Hittel and Ralph Greenthal.                 *
     9                        *                                                                         *
    10                        ***************************************************************************
    11 00:FEF3:              	 ENDS
    12                        
     1                        	 STTL 'Monitor / Program Flow'
     2                        	 PAGE
     3                        	 DATA
  Wed Oct 18 2000 14:10                                                                                                    Page 2

    'W65C134 Internal ROM Monitor ($F000)'
    'Monitor / Program Flow'

     4                        *                                  PROGRAM FLOW
     5                        *
     6                        *        The 134 monitor (called the F-thousand monitor) is screened into the
     7                        *   ROM of the 134.  This section of text describes the steps taken by the
     8                        *   monitor from power up to a command prompt.  It is intended as an overview
     9                        *   only; not a specific, line by line analysis of the code.
    10                        *
    11                        *
    12                        *                                  GOALS
    13                        *
    14                        *        The monitor must be able to be 'shut off' that is it must exit to
    15                        *   another program immediately after reset if necessary.
    16                        *
    17                        *        The monitor must handle the serial port on the 134, and must provide
    18                        *   routines such that another program can easily use the serial port via
    19                        *   the monitor.
    20                        *
    21                        *        The monitor must be able to load other programs into RAM, and
    22                        *   provide some debugging capabilities.
    23                        *
    24                        *        The monitor must maintain a time of day clock, and be capable of
    25                        *   maintaining that clock on minimum power.
    26                        *
    27                        *        The monitor must fit in the $F000 to $FFFF memory space.
    28                        *
    29                        *
    30                        *        These are the main goals of the monitor.
    31                        *
    32                        *
    33                        *
    34                        *                                  RESET SEQUENCE
    35                        *
    36                        *        This monitor is intended for the internal ROM of the 134.  As such,
    37                        *   the assumption is that the reset vector is entered from an internal ROM
    38                        *   reset.  In reality, this means that the code is started with the BCR=00.
    39                        *
    40                        *        Reset can be either a pushbutton reset or a power up reset.  There
    41                        *   is no simple way to differentiate.  However, we will set some semiphores
    42                        *   (flags) in memory to tell us that certain aspects of the machine are
    43                        *   already initialized and should not be changed by the reset routine.
    44                        *
    45                        *        There is a checksum to tell us that the time of day clock is running
    46                        *   and is correct.  If this is the case, the clock value is not reset on
    47                        *   reset.  The same semiphore is used for baud rate.  Therefore, the only
    48                        *   way to get the ToD (Time of Day) clock or the baud rate to completely
    49                        *   reset is to completely remove power from the processor long enough for
    50                        *   the memory to scramble (one minute usually does it).
    51                        *
    52                        *        The second reset semiphore used is a three byte sequence in RAM to
    53                        *   indicate that the system is in 'power down'.  If  this is set the system
    54                        *   will jump to the low power vector (NE46) immediately after reset.
    55                        	 PAGE
    56                        *  RESET OCCURS
  Wed Oct 18 2000 14:10                                                                                                    Page 3

    'W65C134 Internal ROM Monitor ($F000)'
    'Monitor / Program Flow'

    57                        *
    58                        *        Interrupts disabled, stack reset, decimal mode cleared.
    59                        *
    60                        *        Check for low power semiphore; JMP (UNE46) if semiphore set.
    61                        *
    62                        *        Set BCR to 01 - this turns on external address and data lines.
    63                        *
    64                        *        Set PCS3 to $C0 - turns on RAM and ROM chip selects from the 134.
    65                        *
    66                        *        Check location $8000-$8002 for the string 'WDC'.
    67                        *        If it was there, JMP $8004.
    68                        *
    69                        *        Check location $0200-$0202 for the string 'WDC'.
    70                        *        If it was there, JMP $0204.
    71                        *
    72                        *        Start the fast clock. (Don't use it, just start it.)
    73                        *
    74                        *        Copy our interrupt vectors into the RAM interrupt vectors.
    75                        *
    76                        *        Delay  256 * 5 cycles for fast clock to be stable.
    77                        *
    78                        *        Switch to fast clock.
    79                        *
    80                        *        Enable the NE46 interrupt (but not the overall I bit).
    81                        *        This interrupt is used to detect power going down.
    82                        *
    83                        *        Set Timer 2 for a 1 second interrupt (ToD timer).
    84                        *
    85                        *        Enable T2 interrupt (but not the I bit yet).
    86                        *
    87                        *        Set up pointers to the serial buffers. (tiny, in uP RAM)
    88                        *
    89                        *        Figure out the fast crystal frequency by counting it against
    90                        *        the 32 KHz ToD clock crystal.
    91                        *
    92                        *        Check the ToD clock checksum to see if the clock is valid.  If
    93                        *        the clock is not valid, reset it and reset the baud rate counters
    94                        *        for the serial port to the default values.  If the clock checksum
    95                        *        is OK, leave the clock and the serial baud rate alone.
    96                        *
    97                        *        Set up control port of serial port for Xmit and RX.
    98                        *
    99                        *        Check location $E000 for $4C.  If a 4C is present, JSR $E000.
   100                        *
   101                        *        Read the serial port to clear any inital trash data.
   102                        *
   103                        *        ENABLE INTERRUPTS VIA CLEARING THE I BIT.
   104                        *
   105                        *        Output the initial message to the serial port.
   106                        *        (Small initial buffers and a handshake line held in the FALSE
   107                        *         state may cause the monitor to hang here waiting for buffer space
   108                        *         that will not be available until the handshake line goes TRUE)
   109                        *
   110                        *        Execute a BRK instruction (which takes us to the command interpreter)
   111 00:FEF3:              	 ENDS
   112                        
  Wed Oct 18 2000 14:10                                                                                                    Page 4

    'W65C134 Internal ROM Monitor ($F000)'
    'Monitor / Program Flow'

     1                        	 STTL 'MONTXT.ASM - Monitor Commands Defined'
     2                        	 PAGE
     3                        *        01-13-1995
  Wed Oct 18 2000 14:10                                                                                                    Page 5

    'W65C134 Internal ROM Monitor ($F000)'
    'MONTXT.ASM - Monitor Commands Defined'

     4                        	 DATA
     5                        
     6                        
     7                        
     8                        * WRITTEN BY L. A. HITTEL and RALPH GREENTHAL
     9                        *
    10                        * ORIGIONAL  DATE:  JUNE 02,1988
    11                        *  REVISION 1.01 DATE:  DEC  05,1989
    12                        *  REVISION 1.02 DATE:  OCT 08,1991
    13                        *       7 BIT SERIAL UART CODE FIXED
    14                        *       ^C RETURNS 03h NOW - C still set!
    15                        *
    16                        * REV:  01.03   never issued
    17                        *
    18                        * REV:  01.04   June 21, 1993
    19                        *     MODIFIED:
    20                        *      1) SOME BRANCHES REMOVED TO SAVE SPACE
    21                        *      2) UPPER CASE NOT WORKING FOR 'z'
    22                        *      3) 4.9152 MHZ ADDED TO TABLES
    23                        *      4) ASCI INIT STACK PROBLEM
    24                        *      5) RESTORED Acc FOR ROUTINE 'SPAC'
    25                        *      6) CHECKSUM fixed
    26                        *
    27                        * REV:  01.05   JUNE 13, 1994
    28                        *      FIXED START-UP SEQUENCE
    29                        *
    30                        * REV:  01.06   DEC 09, 1994
    31                        *      REMOVED ICE BIT IN BCR FOR ROM USE
    32                        *
    33                        * REV:  01.07   JAN 13, 1995
    34                        *      ADDED TEST FOR SRAM AT $200
    35                        *
    36                        * COM LOG CO. INC. W65C134 Controller Interface Monitor
    37                        *
    38                        *
    39                        *                                  MONITOR PREREQUISITES:
    40                        *
    41                        *
    42                        *  This monitor expects a terminal to be connected to the serial port
    43                        *  The terminal must be configured as follows:
    44                        *
    45                        *  Hardware handshaking.
    46                        *  8 bit data.
    47                        *  No parity.
    48                        *  9600 Baud (Unless otherwise noted).
    49                        *
    50                        *
    51                        *
    52                        *  On reset, the monitor sends copyright and version notices, as well as
    53                        *  a register display to the terminal.  (There are semiphores which can
    54                        *  be placed in EPROM to prevent this)
    55                        *
    56                        *  When the monitor is ready for a command, a '.' (period) is sent.
    57                        *
    58                        *  Commands are entered after the period.  No backsapces are allowed*
    59                        *  this is due to the small initial buffer space.  If a character is
  Wed Oct 18 2000 14:10                                                                                                    Page 6

    'W65C134 Internal ROM Monitor ($F000)'
    'MONTXT.ASM - Monitor Commands Defined'

    60                        *  entered incorrectly, usually a return (CR) will cancel the command.
    61                        *
    62                        *  In most cases, a control C  (^C) will cancel a command in progress.
    63                        
    64                        	 PAGE
    65                        *
  Wed Oct 18 2000 14:10                                                                                                    Page 7

    'W65C134 Internal ROM Monitor ($F000)'
    'MONTXT.ASM - Monitor Commands Defined'

    66                        *                                  MONITOR COMMANDS
    67                        *
    68                        *  ? or H     Lists the commands available
    69                        *
    70                        *
    71                        *  R          Display processor registers (PC,F,A,X,Y,SP)
    72                        
    73                        *  M          Alter Memory address and locations
    74                        *              The first 4 characters entered after the 'M' set the
    75                        *              current address pointer.  Each pair of characters entered
    76                        *              after the address changes the byte at the current address.
    77                        *              A space entered after a byte change increments the current
    78                        *              address pointer.  A CR will end the command, and
    79                        *              can be entered after the initial address or any number of
    80                        *              byte changes.
    81                        
    82                        *  >          Increment the current address and display the contents.
    83                        *              (The M command, above, can set the current address pointer.)
    84                        
    85                        *  <          Decrement the current address and display the contents.
    86                        *              (The M command, above, can set the current address pointer.)
    87                        
    88                        *  SPACE      Uses the current addres spointer and displays the contents.
    89                        
    90                        *  C          Displays a checksum of memory from start address to end address.
    91                        *              Format is C SSSS EEEE, where SSSS is start address and EEEE
    92                        *              is the end address.
    93                        
    94                        *  D          Displays memory from start address to end address.
    95                        *              Format is D SSSS EEEE, where SSSS is the start address...
    96                        
    97                        *  T          Reads current time of day clock and displays the results.
    98                        
    99                        *  X          Switches the system from hardware handshake to XON-XOFF.  This
   100                        *              is a toggle command, each time X is entered, the system
   101                        *              switches.  The flag is displayed after each toggle.  The
   102                        *              flag is zero for hardware handshake.
   103                        *
   104                        *
   105                        *  A          Alter registers in the order PC F A X Y SP.  A space skips
   106                        *              to the next register.  A CR ends the command.
   107                        *
   108                        *  F          Fill memory from start address to end address with value.
   109                        *              The format is F SSSS EEEE VV.
   110                        
   111                        *  V          Move a block of memory from start address to end address.
   112                        *              The format is V SSSS EEEE XX.  SSSS is the start address,
   113                        *              EEEE is the end address, and XX is the number of bytes.
   114                        *              if XX = 0, 256 bytes are moved.
   115                        	 PAGE
   116                        *                                  Monitor Commands, cont.
  Wed Oct 18 2000 14:10                                                                                                    Page 8

    'W65C134 Internal ROM Monitor ($F000)'
    'MONTXT.ASM - Monitor Commands Defined'

   117                        
   118                        *  G (CR)     Begin execution from the current address in the PC.
   119                        
   120                        *  G ADDR     Set PC to ADDR and begin execution.
   121                        
   122                        *  J (CR)     Do a JSR to the current PC address
   123                        
   124                        *  J ADDR     Do a JSR to ADDR.
   125                        *
   126                        *  U          Jump through the USR command vector.  (This is a hook to allow
   127                        *              additional commands to be added to the monitor.
   128                        
   129                        *  B          Jumps to BASIC cold start.
   130                        
   131                        *  K          Jumps to BASIC warm start.
   132                        
   133                        *
   134                        *  I/O COMMANDS
   135                        *  ------------------------
   136                        *
   137                        *  S          Start of a data record in Motorola S28 or S19 format.  When
   138                        *              this command is received, data is not echoed until a CR is
   139                        *              received.  This command is used to load programs, etc and
   140                        *              the Error (E) command should be used after loading a number
   141                        *              of S28 records to check for data errors.
   142                        
   143                        *  W          Output data in Motorola S28 format.  This command outputs 16
   144                        *              byte records (the last record may be less) from start address
   145                        *              to end address.  The format is W SSSS EEEE
   146                        *
   147                        *  E          Display the number of S28 receive errors noticed.  While 'S'
   148                        *              records are received, an accumulation of checksum errors is
   149                        *              kept.  This command displays that accumulation.  Once
   150                        *              displayed, the error number is cleared to 0.
   151                        *
   152                        	 PAGE
   153                        *                                  Monitor Operation:
  Wed Oct 18 2000 14:10                                                                                                    Page 9

    'W65C134 Internal ROM Monitor ($F000)'
    'MONTXT.ASM - Monitor Commands Defined'

   154                        *
   155                        *             The monitor is entered on power up and on a BRK instruction.
   156                        *              Generally, if code goes wild, it will eventually hit a BRK'
   157                        *              and return to the monitor.  At that time, the registers are
   158                        *              displayed and the monitor commands are available to the user.
   159                        *
   160                        *             Interrupts are still running, though, and a bad interrupt can
   161                        *              disable the monitor functions.
   162                        *
   163                        *             Code debugging can be accomplished by placing BRK (00)
   164                        *              instructions in the code, entering the monitor, and examining
   165                        *              memory and registers.  Be careful with the BRK instructions*
   166                        *              if you replace a normal instruction with a BRK you cannot
   167                        *              continue until you return the original instruction to that
   168                        *              location and fix the PC accordingly.
   169                        *
   170                        *             When a BRK instruction has occurred, the PC in the monitor will
   171                        *              be pointing at the location AFTER the BRK instruction.  This
   172                        *              means that if the BRK is placed in the code by an assembler,
   173                        *              and the next instruction follows the BRK, then you can
   174                        *              continue execution simply by hitting 'G' followed be a CR.
   175                        
   176                        *
   177                        *
   178                        *                                  INTERRUPTS
   179                        *
   180                        *             The monitor handles all interrupts.  In many cases, this is
   181                        *              done by having a second vector in RAM.  When the monitor
   182                        *              is started, it writes the RAM locations with pointers to its
   183                        *              own interrupt routines.  Unused interrupts simply jump to
   184                        *              RESET.  The user can revector his interrupts by changing
   185                        *              the RAM vector.
   186                        *
   187                        *             To save memory, most of the edge interrupts jump through the
   188                        *              same vector.  This defeats the purpose of having all those
   189                        *              individual vectors in the first place, but then we only have
   190                        *              a limited amount of on chip RAM.
   191                        *
   192                        *             The result is that for the interrupts sharing the common vector,
   193                        *              the interrupt routine must be able to identify which interrupt
   194                        *              was received. See the code for more details.
   195 00:FEF3:              	 ENDS
   196                        
     1                        	 STTL 'MONZPEQU.ASM - ZP Equates for the $F000 Monitor'
     2                        	 PAGE
     3                        *        06-21-1993
  Wed Oct 18 2000 14:10                                                                                                    Page 10

    'W65C134 Internal ROM Monitor ($F000)'
    'MONZPEQU.ASM - ZP Equates for the $F000 Monitor'

     4                        	 PAGE0
     5                        
     6             0000000F   LOWNIB   EQU $0F
     7             000000F0   HINIB    EQU $F0
     8             00000013   S28BN    EQU 19         16 + 2 FOR ADDR
     9                        *                        + 1 FOR CKSUM
    10             00000011   XON      EQU $11        DC1/^Q
    11             00000013   XOFF     EQU $13        DC3/^S
    12             00000003   CNTRLC   EQU $03
    13             00000018   CNTRLX   EQU $18
    14                        
    15                        
    16                        * 65C134 INPUT/OUTPUT ADDRESSES
    17                        
    18             00000030   PD0      EQU $0030
    19             00000031   PD1      EQU $0031
    20             00000032   PD2      EQU $0032
    21             00000034   PDD0     EQU $0034
    22             00000035   PDD1     EQU $0035
    23             00000036   PDD2     EQU $0036
    24                        
    25                        
    26             00000003   PD3      EQU $0003
    27                        
    28                        
    29             00000007   PCS3     EQU $0007      Output pin or Memory SEL
    30                        
    31                        
    32             00000008   IFR2     EQU $0008
    33             00000009   IER2     EQU $0009      IFR2 INTERRUPT ENABLE
    34             00000010   T1FLG    EQU $10
    35             00000020   T2FLG    EQU $20
    36             00000040   IRQ1FLG  EQU $40
    37             00000080   IRQ2FLG  EQU $80
    38                        
    39             0000000A   TCR1     EQU $000A
    40             0000000B   TCR2     EQU $000B
    41                        
    42             0000000C   T1LL     EQU $000C      TIMER 1 LATCH LOW
    43             0000000D   T1LH     EQU $000D      TIMER 1 LATCH HIGH
    44             0000000E   T2LL     EQU $000E      TIMER 2 LATCH LOW
    45             0000000F   T2LH     EQU $000F      TIMER 2 LATCH HIGH
    46                        
    47             00000010   T1CL     EQU $0010      TIMER 1 COUNTER LOW
    48             00000011   T1CH     EQU $0011      TIMER 1 COUNTER HIGH
    49             00000012   T2CL     EQU $0012      TIMER 2 COUNTER LOW
    50             00000013   T2CH     EQU $0013      TIMER 2 COUNTER HIGH
    51                        
    52                        * RESERVED
    53                        
    54             0000001B   BCR      EQU $001B      BUS CNTRL REG
    55                        *                       BIT 0-EXTERNAL MEM BUS ENABLE
    56                        *                       BIT 1-PORT 44-47 EDGE SENS IRQ
    57                        *                       BIT 2-ALWAYS 0
    58                        *                       BIT 3-ICE ENABLE=1
    59                        *                       BIT 4-PORT 50-53 EDGE SENS IRQ
  Wed Oct 18 2000 14:10                                                                                                    Page 11

    'W65C134 Internal ROM Monitor ($F000)'
    'MONZPEQU.ASM - ZP Equates for the $F000 Monitor'

    60                        *                       BIT 5-PORT 54-57 EDGE SENS IRQ
    61                        *                       BIT 6-NMI,IRQ1,IRQ2 ENABLE = 1
    62                        *                       BIT 7-EXTERNAL $F000-$FFFF = 1
    63                        *
    64             0000001C   PD4      EQU $001C
    65                        *                       BIT 7-DATA SET READY NE47 IRQ (INPUT)
    66                        
    67             0000001D   PD5      EQU $001D
    68                        
    69             00000020   PD6      EQU $0020
    70                        *                       BIT 0-RXD (INPUT)
    71                        *                       BIT 1-TXD (OUTPUT)
    72                        *                       BIT 2-DATA TERMINAL READY (OUTPUT)
    73             00000004   DTR      EQU $04
    74                        
    75             0000001E   PDD4     EQU $001E
    76             0000001F   PDD5     EQU $001F
    77             00000021   PDD6     EQU $0021
    78                        
    79             00000022   ACSR     EQU $0022      ACI CONTROL
    80                        *                       BIT 0-XMIT PORT ENABLE
    81                        *                       BIT 1-XMIT IRQ SOURCE
    82                        *                       BIT 2-7/8 BIT DATA
    83                        *                       BIT 3-PARITY ENABLE
    84                        *                       BIT 4-ODD/EVEN PARITY
    85                        *                       BIT 5-RECV ENABLE
    86                        *                       BIT 6-SOFTWARE SEMIPHORE
    87                        *                       BIT 7-RECV ERROR FLG
    88             00000001   SON      EQU $01
    89                        
    90                        
    91             00000023   ARTD     EQU $0023      ACI XMIT/RECV DATA REG
    92                        
    93                        
    94             00000024   TALL     EQU $0024      TIMER A LATCH LOW
    95             00000025   TALH     EQU $0025
    96             00000026   TACL     EQU $0026      TIMER A COUNTER LOW
    97             00000027   TACH     EQU $0027
    98                        
    99             00000028   TMLL     EQU $0028      TIMER M LATCH LOW
   100             00000029   TMLH     EQU $0029      TIMER M LATCH HIGH
   101             0000002A   TMCL     EQU $002A      TIMER M COUNTER LOW
   102             0000002B   TMCH     EQU $002B      TIMER M COUNTER HIGH
   103                        
   104             0000002C   IFR1     EQU $002C      INTERRUPT FLG REG 1
   105             0000002D   IER1     EQU $002D      INTERRUPT ENABLE REG 1
   106                        
   107                        	 PAGE
   108                        	 ORG $40
  Wed Oct 18 2000 14:10                                                                                                    Page 12

    'W65C134 Internal ROM Monitor ($F000)'
    'MONZPEQU.ASM - ZP Equates for the $F000 Monitor'

   109                        
   110 00:0040:              UBRK     DS 2          USER BREAK
   111 00:0042:              UNMI     DS 2          USER NMI VECTOR
   112 00:0044:              UIRQ2    DS 2          USER IRQ VECTOR
   113 00:0046:              UIRQ1    DS 2          USER IRQ VECTOR
   114 00:0048:              UIRQT2   DS 2          USER IRQ TIMER VECTOR
   115 00:004A:              UIRQT1   DS 2          USER IRQ TIMER VECTOR
   116 00:004C:              UNE46    DS 2          USER NE46 VECTOR
   117 00:004E:              UGENIRQ  DS 2          USER GENERAL IRQ VECTORS
   118             00000050   UIRQEND  EQU *
   119                        
   120 00:0050:              UCMDPTR  DS 2          USER COMMAND PROCESSOR
   121                        *                       IE 'U'X COMMANDS DEFINED
   122                        *                       BY THE USER AND HIS CODE
   123                        
   124 00:0052:              SINPTR   DS 2          SERIAL INPUT BUFFER START ADDR PTR
   125 00:0054:              SOUTPTR  DS 2          SERIAL OUTPUT BUFFER START ADDR PTR
   126 00:0056:              SINCNT   DS 1          SERIAL INPUT BUFFER SIZE COUNT 3-255
   127 00:0057:              SOUTCNT  DS 1          SERIAL OUTPUT BUFFER SIZE COUNT 3-255
   128                        
   129 00:0058:              PCL      DS 1          PROGRAM COUNTER LOW
   130 00:0059:              PCH      DS 1          PROGRAM COUNTER HIGH
   131 00:005A:              FLGS     DS 1          CONDITIONAL CODE REG
   132                        *                       BIT 0--CARRY BIT
   133                        *                       BIT 1--ZERO BIT
   134                        *                       BIT 2--INTERRUPT ENABLE BIT
   135                        *                       BIT 3--BINARY CODED DECIMAL
   136                        *                       BIT 4--BREAK
   137                        *                       BIT 5--NU
   138                        *                       BIT 6--OVERFLOW
   139                        *                       BIT 7--MINUS
   140 00:005B:              ACC      DS 1          TEMP ACC REG
   141 00:005C:              XR       DS 1          TEMP X REG
   142 00:005D:              YREG     DS 1          TEMP Y REG
   143 00:005E:              TMPSP    DS 1          TEMP STACK POINTER
   144 00:005F:              TMPC     DS 1          COUNT DOWN CTR FOR S28
   145 00:0060:              TODCKS   DS 1          IRQ TEMP REG FOR ACC
   146                        *                       BEFORE CKING BRK CMD
   147                        
   148                        
   149                        
   150 00:0061:              H100HZ   DS 1          1000HZ NMI
   151                        
   152 00:0062:              TENTHSEC DS 1          0.1 SEC
   153 00:0063:              SEC      DS 1          SECONDS   0 TO 59
   154 00:0064:              MIN      DS 1          MINUTES   0 TO 59
   155 00:0065:              HR       DS 1          HOURS     0 TO 23
   156 00:0066:              DAY      DS 1          DAY       1 TO 28,29,30,31
   157 00:0067:              MONTH    DS 1          MONTH 1= JAN 12= DEC
   158 00:0068:              YR       DS 1          88
   159 00:0069:              DAYWK    DS 1          DAY OF WEEK 1 = SUNDAY
   160                        *                       7 = SATURDAY
   161 00:006A:              DAYLIT   DS 1          DAY LIGHT SAVINGS TIME
   162                        *                       BIT 0--ENABLED =1
   163                        *                       BIT 1-6 NU
   164                        *                       BIT 7--IN PROCESS OF
  Wed Oct 18 2000 14:10                                                                                                    Page 13

    'W65C134 Internal ROM Monitor ($F000)'
    'MONZPEQU.ASM - ZP Equates for the $F000 Monitor'

   165                        *                              MODIFYING TOD
   166             00000001   DAYLITFLG EQU $01 
   167             00000080   DAYLPROG  EQU $80
   168                        
   169                        *                       ALARM VARIABLES
   170 00:006B:              ASEC     DS 1          SECONDS   0 TO 59
   171 00:006C:              AMIN     DS 1          MINUTES   0 TO 59
   172 00:006D:              AHR      DS 1          HOURS     0 TO 23
   173 00:006E:              ADAY     DS 1          DAY       1 TO 28,29,30,31
   174 00:006F:              AMONTH   DS 1          MONTH 1= JAN 12= DEC
   175 00:0070:              AYR      DS 1          88
   176 00:0071:              ADAYWK   DS 1          DAY OF WEEK 1 = SUNDAY
   177                        *                       7 = SATURDAY
   178 00:0072:              SFLAG    DS 1          SERIAL RS-232 FLAGS
   179                        *                       BIT 0-SERIAL INPUT QUEUE DATA
   180                        *                       BIT 1-CONTROL 'C' RECEIVED, FLUSH QUEUE
   181                        *                       BIT 2-XON/XOFF CONTROL USED=1
   182                        *                       BIT 3-XON/XOFF OR HDW HS SEND OVERFLOW
   183                        *                       BIT 4-LAST CNTRL CHAR WAS XON=1 XOFF=0
   184                        *                       BIT 5-ECHO ON/OFF FLAG OFF=1
   185                        *                       BIT 6-OUTPUT XOFF
   186                        *                       BIT 7-OUTPUT XON
   187             00000001   SFLG      EQU $01
   188             00000002   CFLG      EQU $02
   189             00000004   XONOFLG   EQU $04
   190             00000008   SNDOVF    EQU $08
   191             00000010   LASTXONOF EQU $10
   192             00000020   ECHOFF    EQU $20
   193             00000040   SXOFFLG   EQU $40
   194             00000080   SXONFLG   EQU $80
   195                        
   196 00:0073:              SOUTINDX  DS 1         INDEX TO OUTPUT SERIAL RS-232C QUEUE
   197 00:0074:              SOUTEND   DS 1         end of output queue
   198 00:0075:              SININDX   DS 1         INDEX TO INPUT SERIAL RS-232C QUEUE
   199 00:0076:              SINEND    DS 1         end of input queue
   200                        
   201 00:0077:              DISPTYP   DS 1         DISPLAY TYPE AND IF
   202                        *                       TOD DISPLAY IS ON
   203                        *                       BIT 0-2 TYPE OF DISPLAY
   204                        *                       BIT 3-ALARM ENABLE BIT
   205                        *                       BIT 4-ALARM INTERRUPT HAPPENED
   206                        *                       BIT 5-POWER UP IN PROGRESS FLG
   207                        *                       BIT 6-DISPLAY NOT WORKING
   208                        *                       BIT 7-TOD ON DISPLAY FLG
   209                        
   210             00000008   ALRMENAB EQU $08        Enable the ALARM function
   211             00000010   ALRMIRQ  EQU $10        ALARM INTERRUPT
   212             00000020   PUFLG    EQU $20        POWER UP
   213                        
   214                        
   215 00:0078:              WRAP     DS 1          $FFFF WRAP AROUND
   216                        
   217 00:0079:              DIFF     DS 2          EA-SA = DIFF & Y REG HAS HIGH MSB
   218 00:007B:              TMP0     DS 3          START ADDR
   219 00:007E:              TMP2     DS 3
   220 00:0081:              TMP4     DS 2
  Wed Oct 18 2000 14:10                                                                                                    Page 14

    'W65C134 Internal ROM Monitor ($F000)'
    'MONZPEQU.ASM - ZP Equates for the $F000 Monitor'

   221 00:0083:              TMP6     DS 2
   222 00:0085:              ERRORS   DS 1          S28 DOWNLOAD ERROR COUNT
   223 00:0086:              SPEED    DS 1          MAIN XTAL SPEED
   224                        *                       0 = 2.000000MHZ
   225                        *                       1 = 4.000000MHZ
   226                        *                       2 = 2.457600MHZ
   227                        *                       3 = 3.686400MHZ
   228                        *                       4 = 1.843200MHZ
   229                        *                       5 = 4.914   MHZ
   230                         
   231             0000007E   DEST     EQU TMP2       DESTINATION ADDR
   232             0000007B   SRCE     EQU TMP0       SOURCE ADDR
   233             00000083   TEMP     EQU TMP6
   234                        
   235 00:0087:              	 ENDS          Ends page 0 declarations
     1                        	 CODE
     2                                 ORG $8000
     3             00000000   IROM     EQU 0
     4 00:8000: 57 44 43 00  	 BYTE 'WDC',00
     5 00:8004: A9 81                 LDA #$81
     6 00:8006: 85 1B                 STA BCR
     7 00:8008: A9 C1        	 LDA #$C1
     8 00:800A: 85 07        	 STA PCS3
     9 00:800C: 4C F5 F0     	 JMP NOEXTROM
    10                        	 ENDS
    11                        
     1                        	 STTL 'MONJMP.ASM - Monitor JMP Table'
     2                        	 PAGE
     3                        *        06-21-1993
  Wed Oct 18 2000 14:10                                                                                                    Page 15

    'W65C134 Internal ROM Monitor ($F000)'
    'MONJMP.ASM - Monitor JMP Table'

     4                        	 CODE
     5                        
     6                        	 ORG $F000
     7                        
     8                        
     9 00:F000: 4C B0 F6     	 JMP VERSION    GET MONITOR VERSION
    10                        *             Returns monitor version in A, month in X, day in Y.
    11                        
    12 00:F003: 4C 52 FD     	 JMP ACI_INIT   INITIALIZES ACIA
    13                        *             Initializes ACI to baud rate in A, data length in X,
    14                        *             and parity in Y.
    15                        *             Anything in the current buffers is flushed.
    16                        *             Baud rate values are:
    17                        *
    18                        *             A   Baud rate       A        Baud rate
    19                        *            ---  ---------      ---       ---------
    20                        *             0        75          6           1800
    21                        *             1       110          7           2400
    22                        *             2       150          8           4800
    23                        *             3       300          9           9600
    24                        *             4       600          A          19200
    25                        *             5      1200          B          38400
    26                        
    27                        *             X has data length 7 = 7 bits, 8 = 8 bits
    28                        *             Y has parity.  B0 = 1 enables, B1 = 1 sets even parity.
    29                        *             B1=0 sets odd parity.
    30                        
    31 00:F006: 4C 8F FC     	 JMP RD_CHAR    RETURNS A CHARACTER
    32                        *             from ACIA if one was present.  Otherwise it will return
    33                        *             a 00 (null). CY = 1 if ^C is encountered and control C
    34                        *             flag reset (see CK_CONTC)
    35                        
    36 00:F009: 4C D8 FC     	 JMP CK_CONTC   RETURNS WITH C BIT SET if a control "C" has been
    37                        *            detected on input else -C = 0
    38                        
    39 00:F00C: 4C 71 FC     	 JMP GETCH      READ ACIA
    40                        *             Wait until we get a character CY = 1 if ^C and
    41                        *             acc = null ($00).
    42                        *             C flag reset (see CK_CONTC) This routine also echos the
    43                        *             character, this feature can be switched off. Echo is bit 5
    44                        *             of SFLAG (addr 0072)
    45                        
    46 00:F00F: 4C 11 FC     	 JMP OUTCH      WRITE ACIA
    47                        *            ACC has the character (7-bit ASCII) to send CY = 1 if ^C
    48                        
    49 00:F012: 4C F4 FB     	 JMP CRLF       PRINT CARRIAGE RETURN.
    50                        *             ACC used
    51                        
    52 00:F015: 4C 09 FC     	 JMP SPAC       PRINTS A SPACE
    53                        *             ALL REG preserved
    54                        
    55 00:F018: 4C 39 FD     	 JMP ASCBIN     ASCII TO BINARY
    56                        
    57 00:F01B: 4C 59 FC     	 JMP BINASC     BINARY TO ASCII HEX
    58                        *             ACC has lower nibble in ASCII, X has upper nibble in ASCII
    59                        
  Wed Oct 18 2000 14:10                                                                                                    Page 16

    'W65C134 Internal ROM Monitor ($F000)'
    'MONJMP.ASM - Monitor JMP Table'

    60 00:F01E: 4C 06 F5     	 JMP PRTSTR     PRINTS A STRING
    61                        *             Useful for concatenating strings, and can embed CRLF
    62                        *             Y = # of bytes to send X = LO & ACC = HI point to text
    63                        *             CY = 1 if ^C
    64                         
    65 00:F021: 4C E0 FC     	 JMP RDOA       READS AN ADDRESS $XXXX
    66                        *             TMP0 =   starting address low TMP0+1 = starting address high
    67                        *             This routine also echos the character, this feature can be
    68                        *             switched off. Echo is bit 5 of SFLAG (addr 0072) and CY = 1
    69                        *             CY = 0 if SPACE. X reg not used, Y reg restored.
    70                         
    71 00:F024: 4C FD FC     	 JMP RDOB       READS A BYTE $ZZ
    72                        *             hex byte = ACC, and CY = 1 CY = 0 if SPACE
    73                        *             X reg not used, Y reg restored.  This routine also echos
    74                        *             the character this feature can be switched off.
    75                        *             Echo is bit 5 of SFLAG (addr 0072)
    76                         
    77 00:F027: 4C D2 FB     	 JMP WR_ADDR    WRITE AN ADDRESS $XXXX
    78                        *             CY = 1 if ^C
    79                         
    80 00:F02A: 4C EB FB     	 JMP WROB       WRITE A BYTE $XX
    81                        *             CY = 1 if ^C
    82                         
    83 00:F02D: 4C 15 FE     	 JMP ISDECIMAL  CHECKS IF ASCII DECIMAL DIGIT
    84                        *            CY = 1 if not decimal digit
    85                         
    86 00:F030: 4C 1E FE     	 JMP IFASC      CHECKS IF ITS ASCII
    87                        *            CY = 1 if not ASCII
    88                         
    89 00:F033: 4C 25 FE     	 JMP UPPER_CASE CONVERT LOWER CASE ASCII TO UPPER CASE
    90                        *            ASCII character in ACC is converted to upper case ASCII.
    91                        
    92                         
    93 00:F036: 4C EA FD     	 JMP MVDATA     MOVE DATA
    94                        *            TMP0,+1 =   Source address (Low, Hi)
    95                        *            TMP2,+1 =   Destination address low,hi
    96                        *            Y = # of bytes to be moved.
    97                        *            Y = 0 moves 256 bytes.
    98                        *            WARNING: TWO MEMORY AREAS MUST NOT OVER LAP
    99                        *             CY = 1 IF NO RAM AT DEST LOCATION
   100                                              
   101 00:F039: 4C 18 F2     	 JMP START      This is used to get back to the command prompt
   102                        *            for the monitor.  It resets the stack from the memory location
   103                        *            that gets updated on the BRK command.
   104                         
   105 00:F03C: 4C FB FD     	 JMP HEXIN      CONVERTS ASCII HEX TO
   106                        *            HEX/BINARY
   107                        *            returns hex/nibble binary in ACC
   108                        *            IF CARRY SET THEN NOT ASCII HEX
   109                         
   110 00:F03F: 4C 31 FE     	 JMP BIN2DEC    Converts value in A from hex to packed decimal.
   111                        *            Do not exceed 99.
   112                         
   113 00:F042: 4C 8B F7     	 JMP MS19OUT    MOTOROLA S19 OUTPUT
   114                        *            TMP0 =   starting address low
   115                        *            TMP0+1 = starting address high
  Wed Oct 18 2000 14:10                                                                                                    Page 17

    'W65C134 Internal ROM Monitor ($F000)'
    'MONJMP.ASM - Monitor JMP Table'

   116                        *            TMP2 =   ending address low
   117                        *            TMP2+1 = ending address high
   118                        *            TMP6 =   Offset address low       Address field of S-Record
   119                        *            TMP6+1 = Offset address high      is data address + offset)
   120                         
   121 00:F045: 4C BA F6     	 JMP MS28IN     MOTOROLA S28 INPUT (Also S19)
   122                        
   123                         
   124 00:F048: 4C 55 F8     	 JMP CHK_SUM    CALCULATE CHECK SUM
   125                        *            TMP0 & TMP0+1 contain starting address
   126                        *            TMP2 & TMP2+1 contain ending address
   127                        *            TMP4 & TMP4+1 contains the sum of the digits to
   128                        *            facilitate either TWO's compliment or ONE's compliment checksum
   129                        *            Difference between TMP0 & TMP2 should not be GT 255
   130                         
   131 00:F04B: 4C FC F9     	 JMP RD_CLOCK   You give this routine a pointer in A,X (A is low).
   132                        *             This routine puts the real time data in that location in the
   133                        *             following format:
   134                        
   135                        *             Byte        Contents
   136                        
   137                        *              0          Seconds, in 2's complement.
   138                        *              1          Minutes,       ""
   139                        *              2          Hours (0-23)   ""
   140                        *              3          Day of Month   ""
   141                        *              4          Month (1-12)   ""
   142                        *              5          Year           ""
   143                        *              6          Weekday (1-7)  ""
   144                        
   145 00:F04E: 4C 12 FA     	 JMP WR_CLOCK   You write a buffer with the time, in the format shown
   146                        *             above.  Put a pointer to the buffer in A,X and call this routine
   147                        *             to change the TOD clock.
   148                         
   149 00:F051: 4C E6 F9     	 JMP RTC_MODE   DAYLIGHT SAVINGS FLAG
   150                        *             Call this routine with ACC=1 and the RTC will make daylight
   151                        *             savings shifts when required. If called with ACC=0, no shifts will
   152                        *             be made. CY = 1 on error
   153                         
   154 00:F054: 4C 28 FA     	 JMP WR_ACLOCK  You write a buffer with the time, in the format
   155                        *             shown above.  Put a pointer to the buffer in A,X and call this
   156                        *             routine to change the alarm clock.
   157                        *             There is a WILD CARD of $FF for a match.
   158                        
   159 00:F057: 4C F5 F0     	 JMP NOEXTROM   Entry point written at $8000
   160                        
   161 00:F05A: CB EA 60     	 BYTE $CB,$EA,$60   WAIT RTS INTERNAL ROM
   162                        
   163                        
   164 00:F05D: 4C 0B FE     	 JMP ISHEX      TESTS FOR VALID ASCII HEX DIGIT
   165                        *            CY = 1 if not ASCII HEX and returns char in UPPER case.
   166                        
   167                        
   168 00:F060: 4C B4 FD     	 JMP FLUSH_SERIAL_BUFF SETUP QUEUE COUNTERS TO ZERO
   169                        *            IE FLUSH ALL SERIAL QUEUES
   170                        
   171                        	 ENDS
  Wed Oct 18 2000 14:10                                                                                                    Page 18

    'W65C134 Internal ROM Monitor ($F000)'
    'MONJMP.ASM - Monitor JMP Table'

   172                        
     1                        	 STTL 'MON1.ASM - Initial Code'
     2                        	 PAGE
     3                        *        01-13-1995
  Wed Oct 18 2000 14:10                                                                                                    Page 19

    'W65C134 Internal ROM Monitor ($F000)'
    'MON1.ASM - Initial Code'

     4                        	 CODE
     5                        
     6                        
     7             0000F063   MONVER_  EQU *
     8 00:F063: 17 01 13 95  	 BYTE $17,$01,$13,$95  Must also be altered in MON2.ASM
     9                        *                               The log-on message has ASCII version
    10             0000F067   WDC      EQU *
    11 00:F067: 57 44 43     	 BYTE 'WDC'
    12                        
    13             0000F06A   MONIRQTBL EQU *          USER INTERRUPTS
    14 00:F06A: FC F1        	 WORD MONBRK    UBRK
    15 00:F06C: 8F F0        	 WORD RESET     UNMI
    16 00:F06E: 8F F0        	 WORD RESET     UIRQ2
    17 00:F070: 88 F0        	 WORD RESCN     UIRQ1
    18 00:F072: F8 F8        	 WORD TODIRQ    UIRQT2
    19 00:F074: 8F F0        	 WORD RESET     UIRQT1
    20 00:F076: 4B FE        	 WORD PDOWN     UNE46
    21 00:F078: 8F F0        	 WORD RESET     UGENIRQ
    22 00:F07A: 18 F2        	 WORD START     UCMDPTR
    23             0000F07C   MONIRQEND EQU *
    24                        
    25             0000F07C   MXTALCALC EQU *          MAX
    26 00:F07C: C1           	 BYTE $C1       2MHZ
    27 00:F07D: E1           	 BYTE $E1       4MHZ
    28 00:F07E: CD           	 BYTE $CD       2.4576MHZ
    29 00:F07F: DF           	 BYTE $DF       3.6864MHZ
    30 00:F080: BD           	 BYTE $BD       1.8432MHZ
    31 00:F081: E7           	 BYTE $E7       4.9125 MHZ
    32             0000F082   MXTLEND  EQU *
    33                        
    34             0000F082   MNTALCALC EQU *          MIN
    35 00:F082: C2           	 BYTE $C2       2MHZ
    36 00:F083: E2           	 BYTE $E2       4MHZ
    37 00:F084: CE           	 BYTE $CE       2.4576MHZ
    38 00:F085: E0           	 BYTE $E0       3.6864MHZ
    39 00:F086: BE           	 BYTE $BE       1.8432MHZ
    40 00:F087: E8           	 BYTE $E8       4.9125 MHZ
    41             0000F088   MNTLEND  EQU *
    42                        
    43                        
    44 00:F088: 48           RESCN     PHA
    45 00:F089: A9 40        	  LDA #$40       RESET IRQ1
    46 00:F08B: 04 08                  TSB IFR2
    47 00:F08D: 68                     PLA
    48 00:F08E: 40                     RTI
    49                        
    50                        
    51                        
    52             0000F08F   RESET    EQU *
    53 00:F08F: 78                    SEI
    54 00:F090: D8           	 CLD             CLEAR DECIMAL MODE
    55 00:F091: A2 FF                 LDX #$FF
    56 00:F093: 9A                    TXS
    57                        	 IFDEF IROM
    58 00:F094: 64 07                 STZ PCS3
    59 00:F096: A9 01        	 LDA #$01        EXT BUSS BUT NO ICE MODE
  Wed Oct 18 2000 14:10                                                                                                    Page 20

    'W65C134 Internal ROM Monitor ($F000)'
    'MON1.ASM - Initial Code'

    60                        	 ELSE
    61                        	 LDA #$80        CS7  EPROM
    62                        	 STA PCS3
    63                        	 LDA #$89        EXT BUSS, ICE & EXT ROM
    64                        	 ENDIF
    65 00:F098: 85 1B                 STA BCR
    66                        
    67                        *        Reset all regs to reset values (in case we had a JMP reset rather
    68                        *        than a hard reset.  Exception is TCR1 because the chip will die if
    69                        *        we switch to slow clock and shut off fast clock simultaniously,
    70                        
    71 00:F09A: 64 08                 STZ IFR2
    72 00:F09C: 64 09                 STZ IER2
    73 00:F09E: 64 0B                 STZ TCR2
    74 00:F0A0: 64 1C                 STZ PD4
    75 00:F0A2: 64 1D                 STZ PD5
    76 00:F0A4: 64 1E                 STZ PDD4
    77 00:F0A6: 64 1F                 STZ PDD5
    78 00:F0A8: 64 20                 STZ PD6
    79 00:F0AA: 64 21                 STZ PDD6
    80 00:F0AC: 64 2C                 STZ IFR1
    81 00:F0AE: 64 2D                 STZ IER1
    82 00:F0B0: A9 FF                 LDA #$FF
    83 00:F0B2: 85 03                 STA PD3
    84 00:F0B4: A9 F9                 LDA #$F9
    85 00:F0B6: 14 0A                 TRB TCR1
    86                        
    87                        	 IFDEF IROM
    88 00:F0B8: A5 7B        	 LDA <$7B        see if we are in low power mode.
    89 00:F0BA: C9 55                 CMP #$55
    90 00:F0BC: D0 0F                 BNE NOLPWR
    91 00:F0BE: A5 7C        	 LDA <$7C
    92 00:F0C0: C9 AA                 CMP #$AA
    93 00:F0C2: D0 09                 BNE NOLPWR
    94 00:F0C4: A5 7D        	 LDA <$7D
    95 00:F0C6: C9 88                 CMP #$88
    96 00:F0C8: D0 03                 BNE NOLPWR
    97                        
    98 00:F0CA: 6C 4C 00     	 JMP (|UNE46)    if we were, the vector is there.
    99                        
   100             0000F0CD   NOLPWR   EQU *
   101                        	 ENDIF
   102                        
   103 00:F0CD: A9 C0        	 LDA #$C0        ENABLE $8000 & $0200
   104 00:F0CF: 04 07        	 TSB PCS3        SO WE CAN CK THE 'WDC'
   105                        
   106 00:F0D1: A2 00                 LDX #$00
   107 00:F0D3: BD 00 80     CKHIROM  LDA $8000,X      CHK FOR EXTERNAL ROM
   108 00:F0D6: DD 67 F0              CMP WDC,X
   109 00:F0D9: D0 08                 BNE CKLOWRAM
   110 00:F0DB: E8                    INX
   111 00:F0DC: E0 03                 CPX #3
   112 00:F0DE: D0 F3                 BNE CKHIROM
   113 00:F0E0: 4C 04 80     	 JMP $8004       JMP TO EXTERNAL ROM
   114                        
   115             0000F0E3   CKLOWRAM EQU *           CHK FOR LOW MEM ROM
  Wed Oct 18 2000 14:10                                                                                                    Page 21

    'W65C134 Internal ROM Monitor ($F000)'
    'MON1.ASM - Initial Code'

   116 00:F0E3: A2 00                 LDX #$00
   117 00:F0E5: BD 00 02     LORAMLP  LDA $200,X
   118 00:F0E8: DD 67 F0              CMP WDC,X
   119 00:F0EB: D0 08                 BNE NOEXTROM
   120 00:F0ED: E8                    INX
   121 00:F0EE: E0 03                 CPX #3
   122 00:F0F0: D0 F3                 BNE LORAMLP
   123 00:F0F2: 4C 04 02     	 JMP $204        JMP TO EXTERNAL ROM
   124                             
   125                        
   126                        NOEXTROM:
   127                        
   128 00:F0F5: AD 00 02     	 LDA $200        CHECK FOR RAM AT $200
   129 00:F0F8: 49 FF                 EOR #$FF
   130 00:F0FA: 8D 00 02              STA $200
   131 00:F0FD: CD 00 02              CMP $200
   132 00:F100: D0 0A                 BNE NOEXTRAM
   133 00:F102: 49 FF                 EOR #$FF
   134 00:F104: 8D 00 02              STA $200
   135 00:F107: CD 00 02              CMP $200
   136 00:F10A: F0 04                 BEQ EXTRAM
   137                        
   138                        NOEXTRAM:
   139 00:F10C: A9 40        	 LDA #$40        TURN OFF SRAM to keep stack
   140 00:F10E: 14 07        	 TRB PCS3        INSIDE 65C134
   141                        
   142                        EXTRAM:
   143                        	 IFNDEF IROM
   144                        	 LDA $7B         see if we are in low power mode.
   145                        	 CMP #$55
   146                        	 BNE NOLPWR
   147                        
   148                        	 LDA $7C
   149                        	 CMP #$AA
   150                        	 BNE NOLPWR
   151                        
   152                        	 LDA $7D
   153                        	 CMP #$88
   154                        	 BNE NOLPWR
   155                        
   156                        	 JMP (UNE46)     if we were, the vector is there.
   157                        
   158                        NOLPWR   EQU *
   159                        	 ENDIF
   160                        
   161                        
   162                        *  START FAST CLOCK BUT NOT USING YET
   163 00:F110: A9 04                 LDA #$04
   164 00:F112: 04 0A                 TSB TCR1
   165                        
   166 00:F114: A2 12        	 LDX #MONIRQEND-MONIRQTBL  SETUP ALL USER INTERRUPTS
   167 00:F116: BD 69 F0     FUIRQS   LDA MONIRQTBL-1,X
   168 00:F119: 95 3F                 STA UBRK-1,X
   169 00:F11B: CA                    DEX
   170 00:F11C: D0 F8                 BNE FUIRQS
   171                        
  Wed Oct 18 2000 14:10                                                                                                    Page 22

    'W65C134 Internal ROM Monitor ($F000)'
    'MON1.ASM - Initial Code'

   172 00:F11E: A2 00                 LDX #$00
   173 00:F120: CA           DLY0     DEX
   174 00:F121: D0 FD                 BNE DLY0
   175 00:F123: A9 02        	 LDA #$02        ENABLE FAST CLOCK
   176 00:F125: 04 0A                 TSB TCR1
   177 00:F127: A9 04        	 LDA #$04        ENABLE NE46
   178 00:F129: 04 2D        	 TSB IER1        FOR POWER DOWN SENSE
   179                             
   180                        
   181                        *                        these are placed here to facilitate
   182                        *                        quickly changing for other projects
   183                        *                        near where they are used.
   184             00000004   XMITSIZ  EQU 4
   185             00000010   RECSIZ   EQU $10
   186             00000090   RECLOC   EQU $90
   187                        
   188 00:F12B: A9 00        	 LDA #<32768     SET TIMER 2 FOR
   189 00:F12D: 85 0E        	 STA T2LL        1 SECOND IRQ
   190 00:F12F: A9 80                 LDA #>32768
   191 00:F131: 85 0F                 STA T2LH
   192 00:F133: A9 20        	 LDA #$20        ENABLE TIMER 2 IRQS
   193 00:F135: 85 09                 STA IER2
   194 00:F137: A9 18        	 LDA #$18        TIMER 2 ENABLED
   195 00:F139: 85 0B                 STA TCR2
   196                        
   197 00:F13B: A9 90        	 LDA #<RECLOC    SETUP SERIAL BUFFERS
   198 00:F13D: 85 52        	 STA SINPTR      IN PAGE ZERO
   199 00:F13F: 64 53                 STZ SINPTR+1
   200 00:F141: A9 A0                 LDA #<RECLOC+RECSIZ
   201 00:F143: 85 54                 STA SOUTPTR
   202 00:F145: 64 55                 STZ SOUTPTR+1
   203 00:F147: A9 10        	 LDA #RECSIZ     SIZE OF BUFFERS
   204 00:F149: 85 56                 STA SINCNT
   205 00:F14B: A9 04        	 LDA #XMITSIZ    SIZE OF XMIT
   206 00:F14D: 85 57                 STA SOUTCNT
   207                        
   208                        
   209                        
   210                        *  PATCH THIS BY STARTING HERE AND ENTERING
   211                        
   212                        *   LDX #3
   213                        *   JMP MXTALFND
   214                        
   215                        *   This deletes auto clock selection
   216                        
   217                        
   218                        
   219                        
   220                        
   221                        
   222                        
   223                        *        CK MAIN XTAL Frequency
   224                             
   225 00:F14F: A5 13        T2ZERO   LDA T2CH
   226 00:F151: 05 12        	 ORA T2CL        WAIT UNTIL TOD CLOCK
   227 00:F153: D0 FA        	 BNE T2ZERO      READY TO LOAD
  Wed Oct 18 2000 14:10                                                                                                    Page 23

    'W65C134 Internal ROM Monitor ($F000)'
    'MON1.ASM - Initial Code'

   228                             
   229 00:F155: A2 03                 LDX #3
   230 00:F157: 3A           T2DELAY  DEC A           NOW WAIT A PREDETERMINED
   231 00:F158: D0 FD        	 BNE T2DELAY     AMT OF TIME TO CALC XTAL
   232 00:F15A: CA                    DEX
   233 00:F15B: D0 FA                 BNE T2DELAY
   234                        
   235 00:F15D: A5 12        	 LDA T2CL        CK A RANGE OF #'S
   236                        
   237 00:F15F: A2 06                 LDX #MXTLEND-MXTALCALC
   238 00:F161: DD 7B F0     TRYMXTAL CMP MXTALCALC-1,X
   239 00:F164: F0 0F                 BEQ MXTALFND
   240 00:F166: CA                    DEX
   241 00:F167: D0 F8                 BNE TRYMXTAL
   242                        
   243 00:F169: A2 06                 LDX #MNTLEND-MNTALCALC
   244 00:F16B: DD 81 F0     TRYMNTAL CMP MNTALCALC-1,X
   245 00:F16E: F0 05                 BEQ MXTALFND
   246 00:F170: CA                    DEX
   247 00:F171: D0 F8                 BNE TRYMNTAL
   248                        
   249                        
   250 00:F173: A2 03        	 LDX #3          DEFAULT 2.4576MHZ
   251                             
   252                        
   253                        
   254             0000F175   MXTALFND EQU *
   255 00:F175: CA                    DEX
   256 00:F176: 86 86        	 STX SPEED       SAVE MAIN XTAL SPEED
   257                        
   258 00:F178: A9 09        	 LDA #$09        9600 BAUD
   259 00:F17A: A2 08        	 LDX #8          8 BITS
   260 00:F17C: A0 02        	 LDY #%00000010  EVEN PARITY / BUT NO PARITY
   261 00:F17E: 20 52 FD     	 JSR ACI_INIT    INITIALIZE ACIA.
   262                        *                        hardware handshake is ON
   263                        
   264 00:F181: A2 07                 LDX #DFLTSEND-DFLTS-1 
   265 00:F183: A9 00                 LDA #00
   266 00:F185: 18                    CLC
   267 00:F186: 75 62        CKTODLP  ADC SEC-1,X     CK IF VALID TOD CLOCK
   268 00:F188: CA                    DEX
   269 00:F189: D0 FB                 BNE CKTODLP
   270                             
   271                        
   272 00:F18B: 49 FF                 EOR #$FF
   273 00:F18D: C5 60                 CMP TODCKS
   274 00:F18F: F0 05                 BEQ GDTOD
   275 00:F191: 20 D8 F8     TODERR   JSR INITCLK     NOT VALID TOD CLOCK SO FILL
   276                        
   277 00:F194: 80 0C                 BRA GDTOD1     
   278                        
   279             0000F196   GDTOD    EQU *
   280 00:F196: 20 B4 FD              JSR FLUSH_SERIAL_BUFF
   281 00:F199: 64 85                 STZ ERRORS
   282 00:F19B: A9 FB                 LDA #$FF-XONOFLG
   283 00:F19D: 14 72        	 TRB SFLAG       reset all of SFLAG except XON/XOFF,
  Wed Oct 18 2000 14:10                                                                                                    Page 24

    'W65C134 Internal ROM Monitor ($F000)'
    'MON1.ASM - Initial Code'

   284                        *                        leave it in old state.
   285                        
   286 00:F19F: 20 91 FD              JSR SIOPORTS
   287                        
   288 00:F1A2: AD 00 E0     GDTOD1   LDA $E000       CHK IF WE HAVE E000 ROM
   289 00:F1A5: C9 4C                 CMP #$4C
   290 00:F1A7: D0 03                 BNE SKPE000
   291 00:F1A9: 20 00 E0              JSR $E000
   292             0000F1AC   SKPE000  EQU *
   293 00:F1AC: A5 23        	 LDA ARTD        CLEAR SIO RECEIVE IRQS
   294                             
   295                                 
   296                        
   297                        	 ENDS
   298                        
     1                        	 STTL 'MON2.ASM - As we enable interrupts after RESET'
     2                        	 PAGE
     3                        *        01-13-1995
  Wed Oct 18 2000 14:10                                                                                                    Page 25

    'W65C134 Internal ROM Monitor ($F000)'
    'MON2.ASM - As we enable interrupts after RESET'

     4                        	 CODE
     5                        
     6 00:F1AE: 58           	 CLI             ENABLE INTERUPTS
     7                        *                        WRITE MONITOR VERSION
     8                        
     9 00:F1AF: A9 F1                 LDA #>MONVER
    10 00:F1B1: A2 BD                 LDX #<MONVER
    11 00:F1B3: A0 3F                 LDY #MONVEND-MONVER
    12 00:F1B5: 20 06 F5              JSR PRTSTR
    13 00:F1B8: 20 3E FA     	 JSR SNDTOD      DISPLAY TOD
    14 00:F1BB: 00 00        	 BRK $00         ENTER COM BY BREAK
    15                        
    16                        
    17             0000F1BD   MONVER   EQU *
    18 00:F1BD: 0D 31 33 34  	 BYTE $0D,'134 ROM Version 1.07'   SEE MON1.ASM & MONTXT.ASM
       00:F1C1: 20 52 4F 4D 
       00:F1C5: 20 56 65 72 
       00:F1C9: 73 69 6F 6E 
       00:F1CD: 20 31 2E 30 
       00:F1D1: 37 
    19 00:F1D2: 0D 28 43 29  	 BYTE $0D,'(C) Copyright 1995'
       00:F1D6: 20 43 6F 70 
       00:F1DA: 79 72 69 67 
       00:F1DE: 68 74 20 31 
       00:F1E2: 39 39 35 
    20 00:F1E5: 0D 57 65 73  	 BYTE $0D,'Western Design Center',$0D
       00:F1E9: 74 65 72 6E 
       00:F1ED: 20 44 65 73 
       00:F1F1: 69 67 6E 20 
       00:F1F5: 43 65 6E 74 
       00:F1F9: 65 72 0D 
    21             0000F1FC   MONVEND  EQU *
    22                        
    23                        	 STTL 'MON2.ASM - BRK handler'
    24                        	 PAGE
    25                        
  Wed Oct 18 2000 14:10                                                                                                    Page 26

    'W65C134 Internal ROM Monitor ($F000)'
    'MON2.ASM - BRK handler'

    26                        
    27             0000F1FC   MONBRK   EQU *           MONITOR BREAK
    28 00:F1FC: 85 5B                 STA ACC
    29 00:F1FE: 86 5C        	 STX XR          SAVE X
    30 00:F200: 84 5D        	 STY YREG        Y
    31 00:F202: 68                    PLA
    32 00:F203: 85 5A        	 STA FLGS        FLAGS
    33 00:F205: 18           	 CLC             for the add below
    34 00:F206: 68                    PLA
    35 00:F207: 69 FF        	 ADC #$FF        CY SET TO PC-1 FOR BR
    36 00:F209: 85 58                 STA PCL
    37 00:F20B: 68                    PLA
    38 00:F20C: 69 FF                 ADC #$FF
    39 00:F20E: 85 59                 STA PCH
    40 00:F210: BA                    TSX
    41 00:F211: 86 5E        	 STX TMPSP       SAVE ORIG SP
    42 00:F213: 58           	 CLI             ENABLE SERIAL OUTPUT
    43 00:F214: A9 52        	 LDA #'R'        SET FOR R DISPLAY TO
    44                        *                        PERMIT IMMEDIATE ALTER
    45 00:F216: 80 1B        	 BRA S0          FOLLOWING BREAKPOINT.
    46                        	 ENDS
    47                        
    48                        
     1                        	 STTL 'MON3.ASM - Monitor BRK/Command Handler'
     2                        	 PAGE
     3                        *        06-23-1993
  Wed Oct 18 2000 14:10                                                                                                    Page 27

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Monitor BRK/Command Handler'

     4                        	 CODE
     5                        
     6 00:F218: A6 5E        START    LDX TMPSP       reset the SP to what it was when we hit the BRK
     7 00:F21A: 9A                    TXS
     8 00:F21B: A9 20        	 LDA #ECHOFF     TURN ON ECHO MODE
     9 00:F21D: 14 72                 TRB SFLAG
    10 00:F21F: 20 D8 FC     	 JSR CK_CONTC    CHECK & CLR CONTROL C
    11 00:F222: 64 78        	 STZ WRAP        indicates we are past $FFFF
    12 00:F224: 20 F4 FB     S000     JSR CRLF
    13 00:F227: A9 2E        	 LDA #'.'        TYPE PROMPTING '.'
    14 00:F229: 20 11 FC              JSR OUTCH
    15 00:F22C: B0 EA                 BCS START
    16 00:F22E: 20 71 FC     S00      JSR GETCH
    17 00:F231: B0 E5                 BCS START
    18                        
    19                        *        Raw character is in A.  May be wrong case, etc.  We will JSR to
    20                        *        alt. parsing if it exists at this point.  The alternate parser
    21                        *        will jump through the vector table to START if it completes the
    22                        *        command, and will do an RTS to the regular parser if it does not
    23                        *        have the command in its table.
    24                        
    25 00:F233: AE FD EF     S0       LDX $EFFD       This location has a JMP to an external parser
    26 00:F236: E0 4C        	 CPX #$4C        if an alternate parser exists
    27 00:F238: D0 03                 BNE DFLTPRSR
    28                        
    29 00:F23A: 20 FD EF     	 JSR $EFFD       do the JSR to alternate parser
    30                        *                        and then continue to do our standard parsing
    31                        
    32 00:F23D: C9 0A        DFLTPRSR CMP #$0A
    33 00:F23F: F0 ED        	 BEQ S00         IGNORE LF
    34 00:F241: 20 25 FE     	 JSR UPPER_CASE  IN ACC/ MAKE SURE
    35                        *                        UPPERCASE
    36 00:F244: A2 16        	 LDX #ADRS-CMDS-1      LENGTH OF CMD TABLE
    37 00:F246: DD 67 F2     S1       CMP CMDS,X
    38 00:F249: D0 0D                 BNE S2
    39 00:F24B: 8A                    TXA
    40 00:F24C: 0A           	 ASL A           X2
    41 00:F24D: AA                    TAX
    42 00:F24E: E0 0A        	 CPX #TWOSCMD-ADRS     IF :, M,<, >,SPACE
    43 00:F250: B0 03        	 BCS IJMP         SPACE 2
    44 00:F252: 20 04 FC              JSR SPAC2
    45 00:F255: 7C 7E F2     IJMP     JMP (ADRS,X)
    46                        
    47 00:F258: CA           S2       DEX
    48 00:F259: 10 EB        	 BPL S1          LOOP FOR ALL CMDS
    49                        
    50 00:F25B: A9 3F        ERROPR   LDA #'?'        OPERATOR ERR, TYPE'?'
    51 00:F25D: 20 11 FC     	 JSR OUTCH
    52 00:F260: 80 C2        	 BRA S000        send out a "." and try again
    53                        
    54 00:F262: 20 AC F2     UCMD     JSR UCMD1
    55 00:F265: 80 B1                 BRA START
    56                        
    57                        	 PAGE
    58                        
  Wed Oct 18 2000 14:10                                                                                                    Page 28

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Monitor BRK/Command Handler'

    59                        
    60                        * SINGLE LETTER COMMANDS USED ARE:
    61                        * A,B,C,D,E,F,G,H,J,K
    62                        * M,R,S,T,U,V,W,X
    63                        * <,>, ,?,/
    64                        
    65 00:F267: 41           CMDS     BYTE 'A'       ALTER REGISTERS
    66 00:F268: 4D           	 BYTE 'M'       CHANGE A MEMORY LOC
    67 00:F269: 3C           	 BYTE '<'       DEC TO NXT MEMORY LOC
    68 00:F26A: 3E           	 BYTE '>'       INC TO NXT MEMORY LOC
    69 00:F26B: 20           	 BYTE ' '       REDISPLAY OLD LOCATION
    70 00:F26C: 52           	 BYTE 'R'       DISPLAY REGISTERS
    71 00:F26D: 47           	 BYTE 'G'       GO/JMP
    72 00:F26E: 4A           	 BYTE 'J'       JSR
    73 00:F26F: 44           	 BYTE 'D'       DUMP MEMORY IN HEX
    74 00:F270: 46           	 BYTE 'F'       FILL MEMORY
    75 00:F271: 43           	 BYTE 'C'       CHECK SUM
    76 00:F272: 56           	 BYTE 'V'       MOVE A BLOCK
    77 00:F273: 3F           	 BYTE '?'       HELP MENU
    78 00:F274: 48           	 BYTE 'H'       HELP MENU
    79 00:F275: 54           	 BYTE 'T'       DISPLAY TIME
    80 00:F276: 58           	 BYTE 'X'       TOGGLE XON/XOFF MODE
    81 00:F277: 53           	 BYTE 'S'       S28 LOADER FROM MONITOR
    82 00:F278: 57           	 BYTE 'W'       S28 DUMPER
    83 00:F279: 45           	 BYTE 'E'       PRINT ERRORS
    84 00:F27A: 55           	 BYTE 'U'       USER DEFINED COMMANDS
    85 00:F27B: 42           	 BYTE 'B'       BASIC COLD START
    86 00:F27C: 4B           	 BYTE 'K'       BASIC WARM START & CONTINUE
    87 00:F27D: 2F           	 BYTE '/'       QUICK ACCESS TO MEM FOR HOSTS
    88                        
    89 00:F27E: C0 F3        ADRS     WORD ALTER     CHANGE CURRENT REGS
    90 00:F280: 11 F3        	 WORD ALTERM    ALTER A MEMORY LOC
    91 00:F282: 5A F3        	 WORD DSPLYDEC  DEC ADDR & DISPLAY
    92 00:F284: 55 F3        	 WORD DSPLYINC  INC ADDR & DISPLAY
    93 00:F286: 64 F3        	 WORD DSPLYOLD  DISPLAY CURRENT ADDR
    94                        
    95             0000F288   TWOSCMD  EQU *           END OF AREA NEEDING
    96                        *                        TWO (2) SPACES
    97 00:F288: D6 F2        	 WORD DSPLYR    DISPLAY REGS
    98 00:F28A: DB F3        	 WORD GO        GOTO/JMP
    99 00:F28C: F4 F3        	 WORD GOJSR     JSR/JUMP TO SUBROUTINE
   100 00:F28E: 11 F4        	 WORD WM        DUMP MEMORY IN HEX
   101 00:F290: BB F4        	 WORD FILL      FILL MEMORY WITH A CONSTANT
   102 00:F292: 46 F8        	 WORD CHKSUM    CALC CHECK SUM
   103 00:F294: 6C F8        	 WORD MOVE      MOVE A BLOCK OF UP TO 256 BYTES
   104 00:F296: EF F4        	 WORD HELP      HELP MENU
   105 00:F298: EF F4        	 WORD HELP      HELP MENU
   106 00:F29A: 97 F8        	 WORD DTIME     DISPLAY TIME OF DAY
   107 00:F29C: 80 F8        	 WORD TGLXONXOFF  TOGGLE SERIAL XON/XOFF MODEF
   108 00:F29E: C1 F6        	 WORD LSS       MOTOROLA S28 LOADER FROM MONITOR
   109 00:F2A0: 76 F7        	 WORD WO        MOTOROLA S28 DUMP
   110 00:F2A2: 4A F7        	 WORD PERR      PRINT ERRORS
   111 00:F2A4: 62 F2        	 WORD UCMD      USER DEFINED CMDS
   112 00:F2A6: AF F2        	 WORD CBASIC    COLD START FOR BASIC
   113 00:F2A8: C1 F2        	 WORD KBASIC    WARM START BASIC & CONTINUE
   114 00:F2AA: 9F F8        	 WORD SLASH     HOST MEMORY ACCESS
  Wed Oct 18 2000 14:10                                                                                                    Page 29

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Monitor BRK/Command Handler'

   115                        
   116                        
   117                        
   118 00:F2AC: 6C 50 00     UCMD1    JMP (|UCMDPTR)   GOTO USER COMMANDS
   119                        
   120                        
   121 00:F2AF: AD 00 A0     CBASIC   LDA $A000       CK TO SEE IF BASIC THERE
   122 00:F2B2: C9 4C                 CMP #$4C
   123 00:F2B4: F0 03                 BEQ CBAS1
   124 00:F2B6: 4C 18 F2              JMP START
   125                        
   126 00:F2B9: A9 A0        CBAS1    LDA #>$A000
   127 00:F2BB: 85 59                 STA PCH
   128 00:F2BD: A9 00                 LDA #<$A000
   129 00:F2BF: 80 10                 BRA GBAS
   130                        
   131                        
   132 00:F2C1: AD 03 A0     KBASIC   LDA $A003       CK TO SEE IF BASIC THERE
   133 00:F2C4: C9 4C                 CMP #$4C
   134 00:F2C6: F0 03                 BEQ KBAS1
   135 00:F2C8: 4C 18 F2              JMP START
   136                        
   137 00:F2CB: A9 A0        KBAS1    LDA #>$A003
   138 00:F2CD: 85 59                 STA PCH
   139 00:F2CF: A9 03                 LDA #<$A003
   140 00:F2D1: 85 58        GBAS     STA PCL
   141 00:F2D3: 4C DE F3              JMP GO1
   142                        
   143                        	 STTL 'MON3.ASM - Commands, Display Registers'
   144                        	 PAGE
   145                        
  Wed Oct 18 2000 14:10                                                                                                    Page 30

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Display Registers'

   146                        
   147                         * Routine:  DSPLYR  DISPLAY REG CMD -PC,F,A,X,Y, and SP
   148                         *
   149                         * Reg Used: ACC,Y,X
   150                         * Var Used: TMPC,TMP0
   151                         * Routines Called: REGTTL,WRPC,SETR,SPAC,WROB
   152                         * Returned Reg: NONE
   153                         *
   154                        
   155 00:F2D6: 20 F3 F2     DSPLYR   JSR REGTTL
   156 00:F2D9: 20 DE FB     	 JSR WRPC        WRITE Program Counter
   157 00:F2DC: 20 B7 F3              JSR SETR
   158 00:F2DF: 85 5F                 STA TMPC
   159 00:F2E1: A0 00                 LDY #0
   160 00:F2E3: 20 09 FC     R1       JSR SPAC
   161 00:F2E6: B1 7B        	 LDA (TMP0),Y    DISPLAY 5 REGS
   162 00:F2E8: 20 EB FB              JSR WROB
   163 00:F2EB: C8                    INY
   164 00:F2EC: C6 5F                 DEC TMPC
   165 00:F2EE: D0 F3                 BNE R1
   166 00:F2F0: 4C 18 F2     M1       JMP START
   167                        
   168                        
   169 00:F2F3: A9 F2        REGTTL   LDA #>REGSTR
   170 00:F2F5: A2 FC                 LDX #<REGSTR
   171 00:F2F7: A0 15                 LDY #REGSEND-REGSTR
   172 00:F2F9: 4C 06 F5              JMP PRTSTR
   173                        
   174                        
   175 00:F2FC: 0D 41 44 44  REGSTR   BYTE $0D,'ADDR F  A  X  Y  SP',$0D
       00:F300: 52 20 46 20 
       00:F304: 20 41 20 20 
       00:F308: 58 20 20 59 
       00:F30C: 20 20 53 50 
       00:F310: 0D 
   176                        REGSEND  
   177                        
   178                        * Routine:  ALTERM
   179                        *
   180                        * Reg Used: ACC,Y,X
   181                        * Var Used: TMP0
   182                        * Routines Called: RDOA,SPAC,BYTE
   183                        * Returned Reg: NONE
   184                        *
   185                        
   186 00:F311: 20 E0 FC     ALTERM   JSR RDOA        READ MEM ADDR INTO TMP0
   187 00:F314: B0 DA        	 BCS M1          ERR IF NO ADDR
   188                        
   189 00:F316: A5 7C                 LDA TMP0+1
   190 00:F318: 48           	 PHA              push the starting address  we'll need it later
   191 00:F319: A5 7B        	 LDA TMP0        Display 16 bytes starting at given address
   192 00:F31B: 48                    PHA
   193 00:F31C: 18                    CLC
   194 00:F31D: 69 0F                 ADC #15
   195 00:F31F: 85 7E                 STA TMP2
   196 00:F321: A9 00                 LDA #0
  Wed Oct 18 2000 14:10                                                                                                    Page 31

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Display Registers'

   197 00:F323: 65 7C                 ADC TMP0+1
   198 00:F325: 85 7F                 STA TMP2+1
   199 00:F327: 20 1A F4     	 JSR WRROUT      this routine messes up the starting address
   200                        
   201 00:F32A: 68                    PLA
   202 00:F32B: 85 7B        	 STA TMP0        bring back the starting address
   203 00:F32D: 68                    PLA
   204 00:F32E: 85 7C                 STA TMP0+1
   205 00:F330: 20 F4 FB     KKLLPP1  JSR CRLF
   206 00:F333: 20 D6 FB              JSR WROA
   207 00:F336: 20 04 FC     	 JSR SPAC2       2 spaces
   208 00:F339: 20 09 FC     	 JSR SPAC        and one more
   209 00:F33C: A9 10                 LDA #16
   210 00:F33E: 85 5F                 STA TMPC
   211                        
   212             0000F340   M0       EQU*
   213 00:F340: 20 9B F3              JSR BYTE
   214 00:F343: 90 07        	 BCC M001        branch if we read back what we wrote
   215 00:F345: 08           	 PHP             save EQU flag status
   216                        *                        this is used because there are some periphals
   217                        *                        that we CANT read back, so we want to continue
   218 00:F346: A9 3F        	 LDA #'?'        indicate an error
   219 00:F348: 20 11 FC     	 JSR OUTCH       by replacing the space with a '?'
   220 00:F34B: 28           	 PLP             replace EQU flag from BYTE sub.
   221 00:F34C: F0 E2        M001     BEQ KKLLPP1     branch if we have done 16
   222 00:F34E: B0 F0        	 BCS M0          we had a write error - no space needed
   223 00:F350: 20 09 FC     	 JSR SPAC        output a space if we are on same line and no error
   224 00:F353: 80 EB                 BRA M0
   225                                 
   226                        
   227                        
   228             0000F355   DSPLYINC EQU*           INC DISPLAY MEM
   229 00:F355: 20 3B F8              JSR INCTMP
   230 00:F358: 80 0A                 BRA DSPLYOLD
   231                        
   232                        
   233             0000F35A   DSPLYDEC EQU*           DEC DISPLAY MEM
   234 00:F35A: A5 7B                 LDA TMP0
   235 00:F35C: 08                    PHP
   236 00:F35D: C6 7B                 DEC TMP0
   237 00:F35F: 28                    PLP
   238 00:F360: D0 02        	 BNE DSPLYOLD    REDISPLAY MEM
   239 00:F362: C6 7C                 DEC TMP0+1
   240 00:F364: 20 D6 FB     DSPLYOLD JSR WROA
   241 00:F367: 20 09 FC              JSR SPAC
   242 00:F36A: B2 7B                 LDA (TMP0)
   243 00:F36C: 20 EB FB              JSR WROB
   244 00:F36F: 20 04 FC              JSR SPAC2
   245 00:F372: B2 7B                 LDA (TMP0)
   246 00:F374: 29 7F                 AND #$7F
   247 00:F376: 20 1E FE     	 JSR IFASC       CK IF ASCII DATA
   248 00:F379: 90 02        	 BCC OLD1        YES ,ASCII
   249 00:F37B: A9 2E        	 LDA #'.'        NOT ASCII SO '.'
   250 00:F37D: 20 11 FC     OLD1     JSR OUTCH       OUTPUT ASCII
   251 00:F380: 4C 18 F2              JMP START
   252                        
  Wed Oct 18 2000 14:10                                                                                                    Page 32

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Display Registers'

   253                        
   254             0000F383   DCMP     EQU*
   255 00:F383: 38           	 SEC             TMP2-TMP0 DBL SUBTRACT
   256 00:F384: A5 7E                 LDA TMP2
   257 00:F386: E5 7B                 SBC TMP0
   258 00:F388: 85 79                 STA DIFF
   259 00:F38A: A5 7F                 LDA TMP2+1
   260 00:F38C: E5 7C                 SBC TMP0+1
   261 00:F38E: A8                    TAY
   262 00:F38F: 05 79        	 ORA DIFF        OR LO FOR EQU TEST
   263 00:F391: 60                    RTS
   264                        
   265                        
   266             0000F392   PUTP     EQU*
   267 00:F392: A5 7B        	 LDA TMP0        MOVE TMP0 TO PCH,PCL
   268 00:F394: 85 58                 STA PCL
   269 00:F396: A5 7C                 LDA TMP0+1
   270 00:F398: 85 59                 STA PCH
   271 00:F39A: 60                    RTS
   272                        
   273                        
   274                        
   275                        * Routine:  BYTE
   276                        *  READ AND STORE BYTE.
   277                        *  NO STORE IF SPACE OR TMPC=0.
   278                        * Reg Used: ACC,Y,X
   279                        * Var Used: TMPC,TMP0
   280                        * Routines Called: RDOB,DADD,INCTMP
   281                        * Returned Reg: NONE
   282                        *
   283                        
   284             0000F39B   BYTE     EQU*
   285 00:F39B: 20 FD FC     	 JSR RDOB        CHAR IN A, CY=0 IF
   286 00:F39E: 90 10        	 BCC BY3         SPACE,CR, OR COMMA
   287 00:F3A0: 92 7B        	 STA (TMP0)      STORE BYTE
   288 00:F3A2: D2 7B        	 CMP (TMP0)      TEST FOR VALID WRITE
   289 00:F3A4: F0 07                 BEQ BY2
   290 00:F3A6: 20 3B F8     	 JSR INCTMP      increment the address
   291 00:F3A9: C6 5F                 DEC TMPC
   292 00:F3AB: 38                    SEC
   293 00:F3AC: 60                    RTS
   294                        
   295                        
   296 00:F3AD: 20 2D F8     BY2      JSR DADD        INCR CKSUM
   297 00:F3B0: 20 3B F8     BY3      JSR INCTMP      GO INCR TMP0 ADR
   298 00:F3B3: C6 5F                 DEC TMPC
   299 00:F3B5: 18                    CLC
   300 00:F3B6: 60                    RTS
   301                        
   302                        
   303             0000F3B7   SETR     EQU*
   304 00:F3B7: A9 5A        	 LDA #<FLGS      SET TO ACCESS REGS
   305 00:F3B9: 85 7B                 STA TMP0
   306 00:F3BB: 64 7C        	 STZ TMP0+1      WE KNOW ITS IN PAGE ZERO
   307 00:F3BD: A9 05                 LDA #5
   308 00:F3BF: 60                    RTS
  Wed Oct 18 2000 14:10                                                                                                    Page 33

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Display Registers'

   309                        	 STTL 'MON3.ASM - Commands, Alter registers/memory'
   310                        	 PAGE
   311                        
  Wed Oct 18 2000 14:10                                                                                                    Page 34

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Alter registers/memory'

   312                        
   313                        * Routine:  ALTER
   314                        *   ALTER LAST DISPLAYED ITEM (ADDR IN TMP0)
   315                        *   TO END ENTERING DATA PRESS CR
   316                        * Reg Used: ACC,Y,X
   317                        * Var Used: TMPC,TMP0
   318                        * Routines Called: RDOB,DADD,INCTMP
   319                        * Returned Reg: NONE
   320                        *
   321                        
   322             0000F3C0   ALTER    EQU*
   323 00:F3C0: 20 F3 F2     	 JSR REGTTL      DISPLAY REGISTER HEADER
   324 00:F3C3: 20 E0 FC              JSR RDOA
   325 00:F3C6: B0 03        	 BCS A2          GOT SPACE, CR OR COMMA SO SKIP MODIFYING PC
   326 00:F3C8: 20 92 F3     	 JSR PUTP        ALTER PC
   327             0000F3CB   A2       EQU*
   328                        *         CMP #CR         CHK IF CR IF SO END
   329                        *         BEQ A6
   330 00:F3CB: 20 B7 F3     	 JSR SETR        POINT TO ALTER REGS &
   331 00:F3CE: 85 5F        	 STA TMPC        SAVE BYTE COUNT
   332             0000F3D0   A5       EQU*
   333 00:F3D0: 20 09 FC     	 JSR SPAC        PRESERVES Y
   334 00:F3D3: 20 9B F3              JSR BYTE
   335 00:F3D6: D0 F8        	 BNE A5          NOT A CR YET, SO DO NEXT REGISTER
   336 00:F3D8: 4C 18 F2     A6       JMP START
   337                        
   338                        
   339                        	 STTL 'MON3.ASM - Commands, JMP ---GO TO address'
   340                        	 PAGE
   341                        
  Wed Oct 18 2000 14:10                                                                                                    Page 35

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, JMP ---GO TO address'

   342                        * Routine:  GO
   343                        *
   344                        * Reg Used: ACC,Y,X
   345                        * Var Used: TMP0,SININDX,SINEND,SOUTINDX,SOUTEND
   346                        * Routines Called: GOADDR,FLUSH_SERIAL_BUFF,SPAC,PUTP,RDOB
   347                        * Returned Reg: NONE
   348                        *
   349                        
   350             0000F3DB   GO       EQU*
   351 00:F3DB: 20 05 F4     	 JSR GOADDR      GET ADDRESS
   352                        *                        if we got a BAD ADDR OR CR,so use OLD address
   353 00:F3DE: 20 B4 FD     GO1      JSR FLUSH_SERIAL_BUFF   FLUSH SERIAL QUEUE
   354 00:F3E1: A6 5E                 LDX TMPSP
   355 00:F3E3: 9A           	 TXS             ORIG OR NEW SP VALUE TO SP
   356 00:F3E4: A5 59        GO2      LDA PCH
   357 00:F3E6: 48           	 PHA             SAVE ON STACK
   358 00:F3E7: A5 58                 LDA PCL
   359 00:F3E9: 48                    PHA
   360 00:F3EA: A5 5A                 LDA FLGS
   361 00:F3EC: 48                    PHA
   362 00:F3ED: A5 5B                 LDA ACC
   363 00:F3EF: A6 5C                 LDX XR
   364 00:F3F1: A4 5D                 LDY YREG
   365 00:F3F3: 40                    RTI
   366                        
   367                        
   368                        * Routine:  GOJSR
   369                        *
   370                        * Reg Used: ACC,Y,X
   371                        * Var Used: TMP0,SININDX,SINEND,SOUTINDX,SOUTEND
   372                        * Routines Called: GOADDR,FLUSH_SERIAL_BUFF,SPAC,PUTP,RDOB
   373                        * Returned Reg: NONE
   374                        *
   375                        
   376             0000F3F4   GOJSR    EQU*           GO TO A JSR
   377 00:F3F4: 20 05 F4     	 JSR GOADDR      GET ADDRESS
   378                        *                        if we got a BAD ADDR OR CR,so use OLD address
   379 00:F3F7: 20 B4 FD     	 JSR FLUSH_SERIAL_BUFF  FLUSH SERIAL QUEUE
   380 00:F3FA: A6 5E                 LDX TMPSP
   381 00:F3FC: 9A           	 TXS             ORIG OR NEW SP VALUE TO SP
   382 00:F3FD: A9 F2        	 LDA #>START-1   PLACE RETURN ADDRESS ON STACK
   383 00:F3FF: 48           	 PHA             IE START OF MONITOR
   384 00:F400: A9 17                 LDA #<START-1
   385 00:F402: 48                    PHA
   386 00:F403: 80 DF                 BRA GO2
   387                        
   388             0000F405   GOADDR   EQU*           GET GO/JMP/JSR ADDRESS
   389 00:F405: 20 09 FC              JSR SPAC
   390 00:F408: 20 E0 FC     	 JSR RDOA        GET ADDRESS
   391 00:F40B: B0 03        	 BCS GOAD        USE OLD ADDR, because probably a CR
   392                        *                        ( cy is SET on CR, SPACE, OR COMMA)
   393 00:F40D: 20 92 F3     	 JSR PUTP        SET UP NEW ADDR
   394 00:F410: 60           GOAD     RTS
   395                        
   396                        
   397                        	 STTL 'MON3.ASM - Commands, Display Memory'
  Wed Oct 18 2000 14:10                                                                                                    Page 36

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Display Memory'

   398                        	 PAGE
   399                        
  Wed Oct 18 2000 14:10                                                                                                    Page 37

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Display Memory'

   400                        * HEX MEMORY DUMP ROUTINE
   401                        * Routine:  WM
   402                        *
   403                        * Reg Used: ACC,Y,X
   404                        * Var Used: TMPC,TMP0,TMP2,TMP4,TMP6,DIFF,
   405                        * Routines Called: RD_SAEA,PRTSTR,WROB,SPAC,
   406                        *                  SPAC2,BY3,IFASC,OUTCH,DCMP
   407                        * Returned Reg: NONE
   408                        *
   409                        
   410 00:F411: 20 01 F8     WM       JSR RD_SAEA
   411 00:F414: 20 1A F4              JSR WRROUT
   412 00:F417: 4C 18 F2              JMP START
   413                        
   414 00:F41A: A5 7B        WRROUT   LDA TMP0         This subroutine displays memory from
   415 00:F41C: 48           	 PHA              TMP0 to TMP2
   416 00:F41D: A4 7C                 LDY TMP0+1
   417 00:F41F: 5A                    PHY
   418 00:F420: 48                    PHA
   419 00:F421: A9 F4                 LDA #>DUMPSTR
   420 00:F423: A2 B3                 LDX #<DUMPSTR
   421 00:F425: A0 08                 LDY #DUMPEND-DUMPSTR
   422 00:F427: 20 06 F5              JSR PRTSTR
   423 00:F42A: A0 10                 LDY #16
   424 00:F42C: 68                    PLA
   425 00:F42D: 29 0F                 AND #LOWNIB
   426 00:F42F: 48           WRX1     PHA
   427 00:F430: 20 EB FB              JSR WROB
   428 00:F433: 20 09 FC              JSR SPAC
   429 00:F436: 68                    PLA
   430 00:F437: 1A                    INC A
   431 00:F438: 88                    DEY
   432 00:F439: D0 F4                 BNE WRX1
   433 00:F43B: 68                    PLA
   434 00:F43C: 85 7C                 STA TMP0+1
   435 00:F43E: 68                    PLA
   436 00:F43F: 85 7B                 STA TMP0
   437                        
   438 00:F441: A6 78        WM0      LDX WRAP
   439 00:F443: D0 6D                 BNE WMX
   440 00:F445: 20 F4 FB     	 JSR CRLF        NEW LINE
   441 00:F448: B0 1D                 BCS MD1
   442 00:F44A: 20 D6 FB     	 JSR WROA        PRINT ADDR
   443 00:F44D: B0 18                 BCS MD1
   444 00:F44F: A2 10        	 LDX #16         BYTES PER LINE
   445 00:F451: 86 5F                 STX TMPC
   446 00:F453: 20 83 F3     	 JSR DCMP        EA-SA  DIFF IN DIFF & Y
   447                        
   448 00:F456: 98           	 TYA             Y REG = MSD
   449 00:F457: D0 0A                 BNE WM1
   450 00:F459: A5 79        	 LDA DIFF        LSB of difference
   451 00:F45B: C9 0F        	 CMP #15         full line of display
   452 00:F45D: B0 04                 BCS WM1
   453 00:F45F: 85 5F        	 STA TMPC        SHORT LINE
   454 00:F461: E6 5F                 INC TMPC
   455 00:F463: 20 04 FC     WM1      JSR SPAC2
  Wed Oct 18 2000 14:10                                                                                                    Page 38

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Display Memory'

   456 00:F466: 18                    CLC
   457 00:F467: A5 7B        MD1      LDA TMP0        SAVE POINTERS TO
   458 00:F469: 85 83        	 STA TMP6        DO ASCII
   459 00:F46B: A5 7C                 LDA TMP0+1
   460 00:F46D: 85 84                 STA TMP6+1
   461 00:F46F: A5 5F                 LDA TMPC
   462 00:F471: 85 81                 STA TMP4
   463                        
   464 00:F473: 20 09 FC     WM2      JSR SPAC
   465 00:F476: B2 7B        	 LDA (TMP0)      DATA
   466 00:F478: 20 EB FB     	 JSR WROB        TWO HEX BYTES
   467 00:F47B: B0 35                 BCS WMX
   468 00:F47D: 20 B0 F3     	 JSR BY3         UP ADDR
   469 00:F480: D0 F1                 BNE WM2
   470                        
   471 00:F482: 20 04 FC              JSR SPAC2
   472 00:F485: B0 2B                 BCS WMX
   473 00:F487: 20 04 FC              JSR SPAC2
   474 00:F48A: B0 26                 BCS WMX
   475 00:F48C: A5 83        	 LDA TMP6        RESTORE POINTERS
   476 00:F48E: 85 7B                 STA TMP0
   477 00:F490: A5 84                 LDA TMP6+1
   478 00:F492: 85 7C                 STA TMP0+1
   479 00:F494: A5 81                 LDA TMP4
   480 00:F496: 85 5F                 STA TMPC
   481 00:F498: B2 7B        LISTS2   LDA (TMP0)      DATA
   482 00:F49A: 29 7F        	 AND #$7F        MASK
   483 00:F49C: 20 1E FE     	 JSR IFASC       CK IF ASCII DATA
   484 00:F49F: 90 02        	 BCC LISTS3      YES ,ASCII
   485 00:F4A1: A9 2E        	 LDA #'.'        NOT ASCII SO '.'
   486 00:F4A3: 20 11 FC     LISTS3   JSR OUTCH       OUTPUT ASCII
   487 00:F4A6: B0 0A        	 BCS WMX         GOT A CNTRL C
   488 00:F4A8: 20 B0 F3     	 JSR BY3         UP ADDR
   489 00:F4AB: D0 EB                 BNE LISTS2
   490 00:F4AD: 20 83 F3              JSR DCMP
   491 00:F4B0: B0 8F        	 BCS WM0         AGAIN
   492 00:F4B2: 60           WMX      RTS
   493                        
   494                        
   495             0000F4B3   DUMPSTR  EQU*
   496 00:F4B3: 0D 41 44 44  	 BYTE $0D,'ADDR   '
       00:F4B7: 52 20 20 20 
   497             0000F4BB   DUMPEND  EQU*
   498                        
   499                        	 STTL 'MON3.ASM - Commands, Fill memory'
   500                        	 PAGE
   501                        
  Wed Oct 18 2000 14:10                                                                                                    Page 39

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Fill memory'

   502                        * Routine:  FILL
   503                        *
   504                        * Reg Used: ACC,Y,X
   505                        * Var Used: TMPC,TMP0,TMP6,DIFF
   506                        * Routines Called: RD_SAEA,SPAC,RDOB,BY3,DCMP
   507                        * Returned Reg: NONE
   508                        *
   509                        
   510 00:F4BB: 20 01 F8     FILL     JSR RD_SAEA     READ SA & EA
   511 00:F4BE: B0 29                 BCS FILLSX
   512 00:F4C0: 20 09 FC              JSR SPAC
   513 00:F4C3: B0 24                 BCS FILLSX
   514 00:F4C5: 20 FD FC     	 JSR RDOB        READ FILL CHAR
   515 00:F4C8: 90 1F                 BCC FILLSX
   516 00:F4CA: 85 83                 STA TMP6
   517 00:F4CC: 20 83 F3     FILLS0   JSR DCMP        EA - SA
   518 00:F4CF: A5 79        	 LDA DIFF        LSB of difference
   519 00:F4D1: 85 5F                 STA TMPC
   520 00:F4D3: E6 5F                 INC TMPC
   521 00:F4D5: A5 83        FILLS1   LDA TMP6
   522 00:F4D7: 92 7B        	 STA (TMP0)      DATA
   523 00:F4D9: D2 7B        	 CMP (TMP0)      CK IF WRITTEN
   524 00:F4DB: D0 0F                 BNE FILLERR
   525 00:F4DD: 20 B0 F3     	 JSR BY3         UP ADDR
   526 00:F4E0: D0 F3                 BNE FILLS1
   527 00:F4E2: 20 83 F3              JSR DCMP
   528 00:F4E5: F0 02                 BEQ FILLSX
   529 00:F4E7: B0 E3        	 BCS FILLS0      AGAIN
   530 00:F4E9: 4C 18 F2     FILLSX   JMP START
   531                        
   532 00:F4EC: 4C 5B F2     FILLERR  JMP ERROPR      BAD FILL, MEMORY MISSING
   533                        
   534                        	 STTL 'MON3.ASM - Commands, Help'
   535                        	 PAGE
   536                        
  Wed Oct 18 2000 14:10                                                                                                    Page 40

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Help'

   537                        
   538             0000F4EF   HELP     EQU*           DISPLAY HELP MENU
   539 00:F4EF: A9 F5                 LDA #>HELPMENU
   540 00:F4F1: A2 1C                 LDX #<HELPMENU
   541 00:F4F3: A0 D8                 LDY #HELPEND1-HELPMENU
   542 00:F4F5: 20 06 F5              JSR PRTSTR
   543 00:F4F8: B0 09        	 BCS HELPX       BAD RETURN FROM SERIAL
   544 00:F4FA: A9 F5                 LDA #>HELPEND1
   545 00:F4FC: A2 F4                 LDX #<HELPEND1
   546 00:F4FE: A0 BC                 LDY #HELPEND-HELPEND1
   547 00:F500: 20 06 F5              JSR PRTSTR
   548 00:F503: 4C 18 F2     HELPX    JMP START
   549                        
   550                        
   551                        * Routine:  PRTSTR
   552                        *
   553                        * Reg Used: ACC & Y
   554                        * Var Used: TMP0,TMP2,TMP6
   555                        * Routines Called: OUTCH
   556                        * Returned Reg: NONE
   557                        *
   558                        
   559 00:F506: 85 7C        PRTSTR   STA TMP0+1      MSB OF ADDRESS
   560 00:F508: 86 7B        	 STX TMP0        LSB OF ADDRESS
   561 00:F50A: 84 83        	 STY TMP6        # OF CHAR TO PRINT/SEND OUT TO SERIAL
   562 00:F50C: A0 00                 LDY #0
   563 00:F50E: B1 7B        HELP1    LDA (TMP0),Y
   564 00:F510: 20 11 FC              JSR OUTCH
   565 00:F513: B0 06        	 BCS HELP2       GOT A CNTRL C
   566 00:F515: C8                    INY
   567 00:F516: C4 83                 CPY TMP6
   568 00:F518: D0 F4                 BNE HELP1
   569 00:F51A: 18                    CLC
   570 00:F51B: 60           HELP2    RTS
   571                        
   572                        
   573 00:F51C: 0D           HELPMENU BYTE $0D
   574 00:F51D: 44 20 20 20  	 BYTE 'D      Display memory',$0D
       00:F521: 20 20 20 44 
       00:F525: 69 73 70 6C 
       00:F529: 61 79 20 6D 
       00:F52D: 65 6D 6F 72 
       00:F531: 79 0D 
   575 00:F533: 53 50 41 43  	 BYTE 'SPACE  Display current memory address',$0D
       00:F537: 45 20 20 44 
       00:F53B: 69 73 70 6C 
       00:F53F: 61 79 20 63 
       00:F543: 75 72 72 65 
       00:F547: 6E 74 20 6D 
       00:F54B: 65 6D 6F 72 
       00:F54F: 79 20 61 64 
       00:F553: 64 72 65 73 
       00:F557: 73 0D 
   576 00:F559: 3C 2C 3E 20  	 BYTE '<,>    Decrement, Increment memory address',$0D
       00:F55D: 20 20 20 44 
       00:F561: 65 63 72 65 
  Wed Oct 18 2000 14:10                                                                                                    Page 41

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Help'

       00:F565: 6D 65 6E 74 
       00:F569: 2C 20 49 6E 
       00:F56D: 63 72 65 6D 
       00:F571: 65 6E 74 20 
       00:F575: 6D 65 6D 6F 
       00:F579: 72 79 20 61 
       00:F57D: 64 64 72 65 
       00:F581: 73 73 0D 
   577 00:F584: 4D 20 20 20  	 BYTE 'M      Alter memory',$0D
       00:F588: 20 20 20 41 
       00:F58C: 6C 74 65 72 
       00:F590: 20 6D 65 6D 
       00:F594: 6F 72 79 0D 
   578 00:F598: 2F 20 20 20  	 BYTE '/      Host memory access',$0D,$0D
       00:F59C: 20 20 20 48 
       00:F5A0: 6F 73 74 20 
       00:F5A4: 6D 65 6D 6F 
       00:F5A8: 72 79 20 61 
       00:F5AC: 63 63 65 73 
       00:F5B0: 73 0D 0D 
   579                        
   580 00:F5B3: 52 2C 41 20  	 BYTE 'R,A    Display, Alter registers',$0D
       00:F5B7: 20 20 20 44 
       00:F5BB: 69 73 70 6C 
       00:F5BF: 61 79 2C 20 
       00:F5C3: 41 6C 74 65 
       00:F5C7: 72 20 72 65 
       00:F5CB: 67 69 73 74 
       00:F5CF: 65 72 73 0D 
   581 00:F5D3: 47 2C 4A 20  	 BYTE 'G,J    JMP, JSR to PC [location]',$0D
       00:F5D7: 20 20 20 4A 
       00:F5DB: 4D 50 2C 20 
       00:F5DF: 4A 53 52 20 
       00:F5E3: 74 6F 20 50 
       00:F5E7: 43 20 5B 6C 
       00:F5EB: 6F 63 61 74 
       00:F5EF: 69 6F 6E 5D 
       00:F5F3: 0D 
   582 00:F5F4: 46 2C 56 2C  HELPEND1 BYTE 'F,V,C  Block Fill, Move, Checksum',$0D
       00:F5F8: 43 20 20 42 
       00:F5FC: 6C 6F 63 6B 
       00:F600: 20 46 69 6C 
       00:F604: 6C 2C 20 4D 
       00:F608: 6F 76 65 2C 
       00:F60C: 20 43 68 65 
       00:F610: 63 6B 73 75 
       00:F614: 6D 0D 
   583 00:F616: 53 2C 57 2C  	 BYTE 'S,W,E  S28 Input, Output, Errors',$0D,$0D
       00:F61A: 45 20 20 53 
       00:F61E: 32 38 20 49 
       00:F622: 6E 70 75 74 
       00:F626: 2C 20 4F 75 
       00:F62A: 74 70 75 74 
       00:F62E: 2C 20 45 72 
       00:F632: 72 6F 72 73 
       00:F636: 0D 0D 
  Wed Oct 18 2000 14:10                                                                                                    Page 42

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, Help'

   584                        
   585 00:F638: 3F 2C 48 20  	 BYTE '?,H    Help',$0D
       00:F63C: 20 20 20 48 
       00:F640: 65 6C 70 0D 
   586 00:F644: 42 2C 4B 20  	 BYTE 'B,K    BASIC Start, Continue',$0D
       00:F648: 20 20 20 42 
       00:F64C: 41 53 49 43 
       00:F650: 20 53 74 61 
       00:F654: 72 74 2C 20 
       00:F658: 43 6F 6E 74 
       00:F65C: 69 6E 75 65 
       00:F660: 0D 
   587 00:F661: 54 20 20 20  	 BYTE 'T      Display time',$0D
       00:F665: 20 20 20 44 
       00:F669: 69 73 70 6C 
       00:F66D: 61 79 20 74 
       00:F671: 69 6D 65 0D 
   588 00:F675: 58 20 20 20  	 BYTE 'X      Toggle handshake mode',$0D
       00:F679: 20 20 20 54 
       00:F67D: 6F 67 67 6C 
       00:F681: 65 20 68 61 
       00:F685: 6E 64 73 68 
       00:F689: 61 6B 65 20 
       00:F68D: 6D 6F 64 65 
       00:F691: 0D 
   589 00:F692: 55 20 20 20  	 BYTE 'U      User installed commands'
       00:F696: 20 20 20 55 
       00:F69A: 73 65 72 20 
       00:F69E: 69 6E 73 74 
       00:F6A2: 61 6C 6C 65 
       00:F6A6: 64 20 63 6F 
       00:F6AA: 6D 6D 61 6E 
       00:F6AE: 64 73 
   590             0000F6B0   HELPEND  EQU*
   591                        
   592                        
   593                        * Routine:  VERSION
   594                        *
   595                        * Reg Used: Acc,Y,X
   596                        * Var Used: NONE
   597                        * Routines Called: NONE
   598                        * Returned Reg: Acc,X,Y
   599                        *
   600                        
   601             0000F6B0   VERSION  EQU*           RETURN VERSION IN A,X,Y
   602 00:F6B0: AD 63 F0     	 LDA MONVER_
   603 00:F6B3: AE 64 F0     	 LDX MONVER_+1
   604 00:F6B6: AC 65 F0     	 LDY MONVER_+2
   605 00:F6B9: 60                    RTS
   606                        
   607                        	 STTL 'MON3.ASM - Commands, S28/S19 HEX loader'
   608                        	 PAGE
   609                        
  Wed Oct 18 2000 14:10                                                                                                    Page 43

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, S28/S19 HEX loader'

   610                        
   611                        * Routine:  MS28IN
   612                        *
   613                        * Reg Used: ACC,Y,X
   614                        * Var Used: TMP0,TMP2,TMP4,TMP6,TMPC,ERRORS,SFLAG,
   615                        * Routines Called: GETCH,DADD,RDOB,OUTCH,PERR1,CRLF,SPAC,
   616                        *                   WROA,SPAC2,BYTE,BY2
   617                        * Returned Reg: NONE
   618                        *
   619                        
   620             0000F6BA   MS28IN   EQU*
   621 00:F6BA: 20 71 FC              JSR GETCH
   622 00:F6BD: C9 53        	 CMP #'S'        FIND NEXT RCD MARK (S)
   623 00:F6BF: D0 F9                 BNE MS28IN
   624                        
   625                        
   626             0000F6C1   LSS      EQU*           LOAD SINGLE S28 RECORD
   627                        *                       CHECKSUM USED, BUT
   628                        *                       REQUIRED SO THAT IT
   629                        *                       IS COMPATABLE
   630 00:F6C1: E6 85                 INC ERRORS
   631 00:F6C3: 78                    SEI
   632 00:F6C4: A5 72                 LDA SFLAG
   633 00:F6C6: 29 20                 AND #ECHOFF
   634 00:F6C8: 85 84        	 STA TMP6+1      SAVE CURRENT STATE OF ECHO OFF
   635 00:F6CA: A9 20        	 LDA #ECHOFF     SET ECHO OFF
   636 00:F6CC: 04 72                 TSB SFLAG
   637                        
   638 00:F6CE: 58                    CLI
   639 00:F6CF: 20 71 FC     	 JSR GETCH       GET S RECORD TYPE
   640 00:F6D2: B0 64        	 BCS LSS0        CHK FOR CNTRL 'C'
   641 00:F6D4: 48           	 PHA             SAVE S RECORD TYPE
   642 00:F6D5: 64 81                 STZ TMP4
   643 00:F6D7: 64 82        	 STZ TMP4+1      CLR CKSUM REG
   644 00:F6D9: 20 FD FC     	 JSR RDOB        GET BYTE COUNT
   645 00:F6DC: 85 5F        	 STA TMPC        SAVE BYTE COUNT
   646 00:F6DE: 20 2D F8              JSR DADD
   647 00:F6E1: C6 5F        	 DEC TMPC        GET S28 ADDR
   648 00:F6E3: C6 5F                 DEC TMPC
   649 00:F6E5: C6 5F                 DEC TMPC
   650 00:F6E7: 68           	 PLA             GET RECORD TYPE
   651 00:F6E8: C9 31                 CMP #'1'
   652 00:F6EA: F0 14        	 BEQ SHORTADDR   SHORT RECORD
   653 00:F6EC: C9 39                 CMP #'9'
   654 00:F6EE: F0 10                 BEQ SHORTADDR
   655 00:F6F0: C9 32                 CMP #'2'
   656 00:F6F2: F0 04                 BEQ S28LA1
   657 00:F6F4: C9 38                 CMP #'8'
   658 00:F6F6: D0 40                 BNE LSS0
   659 00:F6F8: C6 5F        S28LA1   DEC TMPC
   660 00:F6FA: 20 FD FC     	 JSR RDOB        GET BANK ADDR, But ignore it
   661 00:F6FD: 20 2D F8     	 JSR DADD        ADD TO CKSM
   662 00:F700: 20 FD FC     SHORTADDR JSR RDOB       SA HO TO TMP0+1
   663 00:F703: 85 7C                 STA TMP0+1
   664 00:F705: 20 2D F8     	 JSR DADD        ADD TO CKSM
   665 00:F708: 20 FD FC     	 JSR RDOB        SA LO TO TMP0
  Wed Oct 18 2000 14:10                                                                                                    Page 44

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, S28/S19 HEX loader'

   666 00:F70B: 85 7B                 STA TMP0
   667 00:F70D: 20 2D F8     	 JSR DADD        ADD TO CHKSM
   668                        
   669 00:F710: A5 5F        	 LDA TMPC        CK IF # OF BYTES ZERO
   670 00:F712: F0 0E                 BEQ S28G2
   671 00:F714: 20 9B F3     S28GD1   JSR BYTE        BYTE SUB/R DECRS LCNT
   672 00:F717: 90 07                 BCC S28G3
   673 00:F719: E6 85        	 INC ERRORS      DEC COUNTER & INC ADDR
   674 00:F71B: E6 81        	 INC TMP4        MESS UP CKSUM SO WILL PRINT ERR
   675 00:F71D: 20 AD F3     	 JSR BY2         SO CNT WILL BE RIGHT FROM
   676                        *                        BYTE ENDING TOO SOON
   677 00:F720: D0 F2        S28G3    BNE S28GD1      ON EXIT
   678 00:F722: 20 FD FC     S28G2    JSR RDOB        CKSUM FROM HEX RCD>TMP0
   679 00:F725: 20 2D F8              JSR DADD
   680 00:F728: A5 81        	 LDA TMP4        GET CHKSUM
   681                        
   682 00:F72A: C9 FF                 CMP #$FF
   683 00:F72C: F0 0A                 BEQ LSS0
   684 00:F72E: A9 07        	 LDA #$07        BEEP
   685 00:F730: 20 11 FC              JSR OUTCH
   686 00:F733: 20 56 F7              JSR PERR1
   687 00:F736: 80 02                 BRA LSFIN
   688                        
   689 00:F738: C6 85        LSS0     DEC ERRORS      A GOOD LOAD
   690 00:F73A: 20 71 FC     LSFIN    JSR GETCH       GET CR OR LF
   691 00:F73D: 78                    SEI
   692 00:F73E: A5 72                 LDA SFLAG
   693 00:F740: 29 DF                 AND #$FF-ECHOFF
   694 00:F742: 05 84        	 ORA TMP6+1      RESTORE STATE OF ECHO OFF
   695 00:F744: 85 72                 STA SFLAG
   696 00:F746: 58                    CLI
   697 00:F747: 4C 18 F2     LHDONE   JMP START       GOTO START
   698                        
   699                        
   700 00:F74A: 20 56 F7     PERR     JSR PERR1
   701 00:F74D: 64 85        	 STZ ERRORS      RESET ERROR COUNT
   702 00:F74F: 64 7B        	 STZ TMP0        RESET ADDR ALSO
   703 00:F751: 64 7C                 STZ TMP0+1
   704 00:F753: 4C 18 F2              JMP START
   705                        
   706                        
   707 00:F756: 20 F4 FB     PERR1    JSR CRLF        PRINT # OF ERRORS
   708 00:F759: A9 45                 LDA #'E'
   709 00:F75B: 20 11 FC              JSR OUTCH
   710 00:F75E: 20 09 FC              JSR SPAC
   711 00:F761: 20 D6 FB     	 JSR WROA        OUTPUT ADDR CLOSE TO
   712 00:F764: 20 04 FC     	 JSR SPAC2       ERROR,MAYBE OFF BY 16
   713 00:F767: A5 85                 LDA ERRORS
   714 00:F769: 4C 87 FA     	 JMP SNDT1       WRITE # OF ERRORS
   715                        
   716                        	 STTL 'MON3.ASM - Commands, S19 HEX output'
   717                        	 PAGE
   718                        
  Wed Oct 18 2000 14:10                                                                                                    Page 45

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, S19 HEX output'

   719                        
   720                        * Routine:  MS19OUT
   721                        *
   722                        * Reg Used: ACC,Y,X
   723                        * Var Used: TMP0,TMP2,TMP4,TMP6,SFLAG,TMPC,DIFF
   724                        * Routines Called: CRLF,GETCH,RD_SAEA,WRTWO,DCMP,DADD
   725                        *                   CKNOUT,WROB
   726                        * Returned Reg: NONE
   727                        *
   728                        
   729 00:F76C: 53 39 30 33  SLASTLINE BYTE  'S9030000FC'
       00:F770: 30 30 30 30 
       00:F774: 46 43 
   730             0000F776   SLASTEND EQU*
   731                        
   732             0000F776   WO       EQU*
   733 00:F776: 64 83        	 STZ TMP6        TMP6 is the Offset added as the address goes out
   734 00:F778: 64 84        	 STZ TMP6+1      We use TMP6 to 'relocate' as we write the output
   735                        
   736 00:F77A: 20 01 F8     	 JSR RD_SAEA     RD START ADDR & END ADDR
   737                        
   738 00:F77D: 20 71 FC     WO1      JSR GETCH       DELAY FOR FINAL CR
   739 00:F780: 20 F4 FB              JSR CRLF
   740 00:F783: A9 FF        	 LDA #$FF        indicates need to send end record
   741 00:F785: 20 8B F7              JSR MS19OUT
   742 00:F788: 4C 18 F2              JMP START
   743                        
   744             0000F78B   MS19OUT  EQU*
   745 00:F78B: 64 78                 STZ WRAP
   746 00:F78D: 48                    PHA
   747 00:F78E: 20 A1 F7              JSR MS19OUTA
   748 00:F791: 68                    PLA
   749 00:F792: F0 0C                 BEQ NOFINAL
   750                        
   751 00:F794: 20 F4 FB     	 JSR CRLF        WRITE LAST LINE
   752 00:F797: A2 6C                 LDX #<SLASTLINE
   753 00:F799: A9 F7                 LDA #>SLASTLINE
   754 00:F79B: A0 0A                 LDY #SLASTEND-SLASTLINE
   755 00:F79D: 20 06 F5              JSR PRTSTR      
   756 00:F7A0: 60           NOFINAL  RTS
   757                        
   758                        
   759 00:F7A1: A6 78        MS19OUTA LDX WRAP
   760 00:F7A3: D0 55                 BNE BCCST2
   761                        
   762 00:F7A5: 20 F4 FB              JSR CRLF
   763 00:F7A8: 64 81                 STZ TMP4
   764 00:F7AA: 64 82        	 STZ TMP4+1      CLEAR CKSUM
   765 00:F7AC: A9 13                 LDA #S28BN
   766 00:F7AE: 85 5F        	 STA TMPC        TMPC = 16+3 FOR SHORT
   767                        
   768 00:F7B0: A9 31        	 LDA #'1'        OUTPUT S1
   769 00:F7B2: A2 53        	 LDX #'S'
   770 00:F7B4: 20 F8 FB              JSR WRTWO
   771 00:F7B7: 20 83 F3     	 JSR DCMP        EA-SA (TMP0+2-TMP0) DIFFERENCE
   772 00:F7BA: 98           	 TYA             IN LOC DIFF,Y REG HAS MSD
  Wed Oct 18 2000 14:10                                                                                                    Page 46

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, S19 HEX output'

   773 00:F7BB: D0 0B        	 BNE WH10        OF DIFFERENCE
   774 00:F7BD: A5 79                 LDA DIFF
   775 00:F7BF: C9 0F                 CMP #15
   776 00:F7C1: B0 05        	 BCS WH10        DIFF GT 15
   777 00:F7C3: 18           	 CLC             ADD 2 FOR ADDR
   778 00:F7C4: 69 04        	 ADC #$04        ADD 1 FOR CKSUM
   779 00:F7C6: 85 5F        	 STA TMPC        ADD 1 FOR BYTE CNT
   780 00:F7C8: A5 5F        WH10     LDA TMPC        OUTPUT BYTE COUNT
   781 00:F7CA: 20 FB F7     	 JSR CKNOUT      RCC CNT IN A
   782                        
   783 00:F7CD: C6 5F                 DEC TMPC
   784 00:F7CF: C6 5F                 DEC TMPC 
   785 00:F7D1: C6 5F                 DEC TMPC 
   786                        
   787 00:F7D3: 18           WH1A     CLC             output the address plus the offset
   788 00:F7D4: A5 7B                 LDA TMP0
   789 00:F7D6: 65 83                 ADC TMP6
   790 00:F7D8: 48                    PHA
   791 00:F7D9: A5 7C                 LDA TMP0+1
   792 00:F7DB: 65 84                 ADC TMP6+1
   793 00:F7DD: 20 FB F7     	 JSR CKNOUT      ADD TO CKSM
   794 00:F7E0: 68                    PLA
   795 00:F7E1: 20 FB F7     	 JSR CKNOUT      ADD TO CKSM
   796                        
   797 00:F7E4: B2 7B        WH2      LDA (TMP0)      WRITE OUT DATA BYTES
   798 00:F7E6: 20 FB F7     	 JSR CKNOUT      INC CKSUM
   799 00:F7E9: 20 B0 F3     	 JSR BY3         INC SA
   800 00:F7EC: D0 F6        	 BNE WH2         LOOP FOR 16 BYTES
   801 00:F7EE: A5 81                 LDA TMP4
   802 00:F7F0: 49 FF        	 EOR #$FF        we want 1's complement
   803 00:F7F2: 20 EB FB     	 JSR WROB        WRITE CKSUM
   804 00:F7F5: 20 83 F3              JSR DCMP
   805 00:F7F8: B0 A7        	 BCS MS19OUTA    LOOP WHILE EA GT OR = SA
   806                        
   807 00:F7FA: 60           BCCST2   RTS
   808                        
   809 00:F7FB: 20 2D F8     CKNOUT   JSR DADD
   810 00:F7FE: 4C EB FB              JMP WROB
   811                        
   812                        
   813                        	 STTL 'MON3.ASM - Commands, General Purpose Routines'
   814                        	 PAGE
   815                        
  Wed Oct 18 2000 14:10                                                                                                    Page 47

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, General Purpose Routines'

   816                        * Routine:  RD_SAEA
   817                        *
   818                        * Reg Used: ACC,Y,X
   819                        * Var Used: TMP0,TMP2
   820                        * Routines Called: RDOA,SPAC,T2T2,T3T3
   821                        * Returned Reg: NONE
   822                        *
   823                        
   824 00:F801: 20 09 FC     RD_SAEA  JSR SPAC        READ 16 BIT ADDR FORM
   825 00:F804: 20 E0 FC              JSR RDOA
   826                        
   827 00:F807: A5 7B        	 LDA TMP0        save SA
   828 00:F809: 48                    PHA
   829 00:F80A: 18                    CLC
   830 00:F80B: 69 0F                 ADC #15
   831 00:F80D: 85 7E                 STA TMP2
   832 00:F80F: A5 7C                 LDA TMP0+1
   833 00:F811: 48                    PHA
   834 00:F812: 69 00                 ADC #0
   835 00:F814: 85 7F        	 STA TMP2+1      EA will be SA+15 if left off
   836                        
   837 00:F816: 20 09 FC     	 JSR SPAC        put a space between the addresses
   838 00:F819: 20 E0 FC     	 JSR RDOA        get ending address
   839 00:F81C: B0 08                 BCS ENDOK
   840                        
   841 00:F81E: A5 7B        	 LDA TMP0        put EA in TMP2
   842 00:F820: 85 7E                 STA TMP2
   843 00:F822: A5 7C                 LDA TMP0+1
   844 00:F824: 85 7F                 STA TMP2+1
   845                        
   846 00:F826: 68           ENDOK    PLA             put SA back in TMP0
   847 00:F827: 85 7C                 STA TMP0+1
   848 00:F829: 68                    PLA
   849 00:F82A: 85 7B                 STA TMP0
   850 00:F82C: 60                    RTS
   851                        
   852                        
   853                        
   854                        
   855                        * Routine:  DADD
   856                        *
   857                        * Reg Used: NONE
   858                        * Var Used: TMP4
   859                        * Routines Called: NONE
   860                        * Returned Reg: NONE
   861                        *
   862                        *                        CALCULATE CHECKSUM
   863 00:F82D: 48           DADD     PHA             SAVE A
   864 00:F82E: 18                    CLC
   865 00:F82F: 65 81                 ADC TMP4
   866 00:F831: 85 81                 STA TMP4
   867 00:F833: A5 82                 LDA TMP4+1
   868 00:F835: 69 00                 ADC #0
   869 00:F837: 85 82                 STA TMP4+1
   870 00:F839: 68           	 PLA             RESTORE A
   871 00:F83A: 60                    RTS
  Wed Oct 18 2000 14:10                                                                                                    Page 48

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, General Purpose Routines'

   872                        
   873                        
   874                        
   875                        
   876                        * Routine:  INCTMP
   877                        *
   878                        * Reg Used: NONE
   879                        * Var Used: TMP0
   880                        * Routines Called: NONE
   881                        * Returned Reg: NONE
   882                        *
   883                        
   884                        *                        INC STRING POINTER
   885 00:F83B: E6 7B        INCTMP   INC TMP0        LO BYTE
   886 00:F83D: D0 06                 BNE INCT2
   887 00:F83F: E6 7C                 INC TMP0+1
   888 00:F841: D0 02                 BNE INCT2
   889 00:F843: E6 78                 INC WRAP
   890 00:F845: 60           INCT2    RTS
   891                        
   892                        	 STTL 'MON3.ASM - Commands, calculate checksum'
   893                        	 PAGE
   894                        
  Wed Oct 18 2000 14:10                                                                                                    Page 49

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, calculate checksum'

   895                        
   896                        * Routine:  CHKSUM
   897                        *           TMP4 & TMP4+1 contains the sum of the digits to
   898                        *           facilitate either TWO's compliment or ONE's compliment checksum
   899                        *           Difference between TMP0 & TMP2 should not be GT 255
   900                        *
   901                        * Reg Used: ACC,Y,X
   902                        * Var Used: TMP0,TMP2,TMP4
   903                        * Routines Called: SPAC2,WROA4,RD_SAEA,CHK_SUM
   904                        * Returned Reg: NONE
   905                        *
   906                        
   907             0000F846   CHKSUM   EQU*           CALCULATE CHECK SUM
   908 00:F846: 20 01 F8              JSR RD_SAEA
   909                        ;        BCS CKS_RSTART  ERROR IN GETTING SA & EA
   910 00:F849: 20 55 F8              JSR CHK_SUM
   911 00:F84C: 20 04 FC              JSR SPAC2
   912 00:F84F: 20 DA FB     	 JSR WROA4       PRINT CHECK SUM
   913             0000F852   CKS_RSTART EQU*
   914 00:F852: 4C 18 F2              JMP START
   915                        
   916                        
   917             0000F855   CHK_SUM  EQU*           CALCULATE CHECK SUM
   918 00:F855: 64 81                 STZ TMP4
   919 00:F857: 64 82        	 STZ TMP4+1      clear checksum register
   920 00:F859: 20 83 F3     	 JSR DCMP        EA-SA in A & Y
   921 00:F85C: F0 0D        	 BEQ CKSX        A & Y or'd on return
   922 00:F85E: B1 7B        CKS1     LDA (TMP0),Y
   923 00:F860: 20 2D F8     	 JSR DADD        add to TMP4
   924 00:F863: 20 3B F8     	 JSR INCTMP      TMP0+1 to TMP0
   925 00:F866: 20 83 F3     	 JSR DCMP        EA-SA  returns 0 if =
   926 00:F869: D0 F3                 BNE CKS1
   927 00:F86B: 60           CKSX     RTS
   928                        
   929                        
   930                        	 STTL 'MON3.ASM - Commands, block move'
   931                        	 PAGE
   932                        
  Wed Oct 18 2000 14:10                                                                                                    Page 50

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, block move'

   933                        * Routine:  MOVE
   934                        *
   935                        * Reg Used: ACC,Y,X
   936                        * Var Used: TMP0,TMP2
   937                        * Routines Called: SPAC,RD_SAEA,RDOB,MVDATA
   938                        * Returned Reg: NONE
   939                        *
   940                        
   941                        
   942 00:F86C: 20 01 F8     MOVE     JSR RD_SAEA     MOVE A BLOCK UPTO 256 BYTES
   943                        *        BCS CKS_RSTART  ERROR IN GETTING SA & EA
   944 00:F86F: 20 09 FC              JSR SPAC
   945 00:F872: 20 FD FC     	 JSR RDOB        GET # OF BYTES
   946 00:F875: A8                    TAY
   947 00:F876: 20 EA FD              JSR MVDATA
   948 00:F879: B0 02                 BCS MOVEBAD
   949 00:F87B: 80 D5                 BRA CKS_RSTART
   950                        
   951 00:F87D: 4C 5B F2     MOVEBAD  JMP ERROPR      DID NOT MOVE MEMORY
   952                        *                        NOT THERE
   953                        	 PAGE
   954                        
  Wed Oct 18 2000 14:10                                                                                                    Page 51

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, block move'

   955                        
   956             0000F880   TGLXONXOFF EQU*         TOGGLE SERIAL XON/XOFF MODE
   957 00:F880: 20 09 FC              JSR SPAC
   958 00:F883: 78                    SEI
   959 00:F884: A5 72                 LDA SFLAG
   960 00:F886: 49 04                 EOR #XONOFLG
   961 00:F888: 85 72                 STA SFLAG
   962 00:F88A: 58                    CLI
   963 00:F88B: 29 04                 AND #XONOFLG
   964 00:F88D: F0 02                 BEQ TGLX1
   965 00:F88F: A9 01                 LDA #1
   966 00:F891: 20 EB FB     TGLX1    JSR WROB        OUTPUT STATUS OF BIT
   967 00:F894: 4C 18 F2              JMP START
   968                        
   969                        
   970                        	 STTL 'MON3.ASM - Commands, display ToD clock'
   971                        	 PAGE
   972 00:F897: 20 F4 FB     DTIME    JSR CRLF
  Wed Oct 18 2000 14:10                                                                                                    Page 52

    'W65C134 Internal ROM Monitor ($F000)'
    'MON3.ASM - Commands, display ToD clock'

   973 00:F89A: 20 3E FA              JSR SNDTOD
   974 00:F89D: 80 B3                 BRA CKS_RSTART
   975                        
   976                        *        The Slash (/) command is to allow host computers quick access
   977                        *        to memory locations.  It has many forms:
   978                        
   979                        *        /<SPACE> returns curr. mem location & increments pointer
   980                        *        /XX<SPACE> writes curr. to mem pointer, re-reads and returns
   981                        *                   the data at the pointer (as a check for writable mem)
   982                        *                   then increments pointer.
   983                        *        /XXXX<SPACE> changes the pointer, returns data, inc's pointer.
   984                        *        /XXXXYY<SPACE>  changes pointer, writes data, reads & returns data,
   985                        *                        and increments the pointer.
   986                        
   987 00:F89F: 78           SLASH    SEI             kill the echo
   988 00:F8A0: A5 72                 LDA SFLAG
   989 00:F8A2: 29 20                 AND #ECHOFF
   990 00:F8A4: 85 84        	 STA TMP6+1      SAVE CURRENT STATE OF ECHO OFF
   991 00:F8A6: A9 20        	 LDA #ECHOFF     SET ECHO OFF
   992 00:F8A8: 04 72                 TSB SFLAG
   993                        
   994 00:F8AA: 58                    CLI
   995                        
   996 00:F8AB: 20 FD FC     	 JSR RDOB        get the first byte
   997 00:F8AE: 90 10        	 BCC RETBYTE     branch if it was a SPACE
   998 00:F8B0: 48           	 PHA             save the data
   999 00:F8B1: 20 FD FC     	 JSR RDOB        get the next byte
  1000 00:F8B4: 90 07        	 BCC WRTBYTE     no next byte - write one byte, read, return
  1001 00:F8B6: 85 7B        	 STA TMP0        two bytes in succession - an address
  1002 00:F8B8: 68                    PLA
  1003 00:F8B9: 85 7C                 STA TMP0+1
  1004 00:F8BB: 80 E2        	 BRA SLASH       we had an address and set it - back to beginning.
  1005                        
  1006 00:F8BD: 68           WRTBYTE  PLA
  1007 00:F8BE: 92 7B                 STA (TMP0)
  1008                        
  1009 00:F8C0: B2 7B        RETBYTE  LDA (TMP0)
  1010 00:F8C2: 20 EB FB     	 JSR WROB        write the byte to the serial port
  1011 00:F8C5: E6 7B        	 INC TMP0        increment the address
  1012 00:F8C7: D0 02                 BNE OUTSLASH
  1013 00:F8C9: E6 7C                 INC TMP0+1
  1014                        
  1015 00:F8CB: 78           OUTSLASH SEI             put the echo back
  1016 00:F8CC: A5 72                 LDA SFLAG
  1017 00:F8CE: 29 DF                 AND #$FF-ECHOFF
  1018 00:F8D0: 05 84        	 ORA TMP6+1      RESTORE STATE OF ECHO OFF
  1019 00:F8D2: 85 72                 STA SFLAG
  1020 00:F8D4: 58                    CLI
  1021                        
  1022 00:F8D5: 4C 18 F2              JMP START                  
  1023                        
  1024                        	 ENDS
  1025                        
     1                        	 STTL 'MON4.ASM - Time of Day Clock Routines'
     2                        	 PAGE
     3                        *        06-22-1993
  Wed Oct 18 2000 14:10                                                                                                    Page 53

    'W65C134 Internal ROM Monitor ($F000)'
    'MON4.ASM - Time of Day Clock Routines'

     4                        	 CODE
     5                        
     6                        
     7                        * TIME OF DAY CLOCK
     8                        * Routine:  INITCLK
     9                        *
    10                        * Reg Used: ACC & X
    11                        * Var Used: SEC,MIN,HR,DAY,MONTH,YR,ASEC, ....
    12                        * Routines Called: NONE
    13                        * Returned Reg: NONE
    14                        *
    15                        
    16                        
    17             0000F8D8   INITCLK  EQU*
    18 00:F8D8: A2 07        	 LDX #DFLTSEND-DFLTS-1  LOAD TOD DEFAULT
    19 00:F8DA: BD A0 FF     ICLK1    LDA DFLTS-1,X
    20 00:F8DD: 95 62                 STA SEC-1,X
    21 00:F8DF: CA                    DEX
    22 00:F8E0: D0 F8                 BNE ICLK1
    23 00:F8E2: A2 07        	 LDX #DFLTSEND-DFLTS-1  RESET ALARM CLOCK ALSO
    24 00:F8E4: 74 6A        ICLK2    STZ ASEC-1,X
    25 00:F8E6: CA                    DEX
    26 00:F8E7: D0 FB                 BNE ICLK2
    27 00:F8E9: A2 07        	 LDX #DFLTSEND-DFLTS-1  LOAD TOD CHECKSUM
    28 00:F8EB: A9 00                 LDA #00
    29 00:F8ED: 18                    CLC
    30 00:F8EE: 75 62        ICLK3    ADC SEC-1,X
    31 00:F8F0: CA                    DEX
    32 00:F8F1: D0 FB                 BNE ICLK3
    33 00:F8F3: 49 FF                 EOR #$FF
    34 00:F8F5: 85 60                 STA TODCKS
    35 00:F8F7: 60                    RTS
    36                        
    37                                 STTL 'MON4.ASM - Time of day clock IRQ routine'
    38                                 PAGE
    39                        
  Wed Oct 18 2000 14:10                                                                                                    Page 54

    'W65C134 Internal ROM Monitor ($F000)'
    'MON4.ASM - Time of day clock IRQ routine'

    40                        
    41                        * Routine:  TODIRQ
    42                        *
    43                        * Reg Used: ACC,Y,X
    44                        * Var Used: SEC,MIN,HR,DAY,MONTH,YR,DAYWK,DAYLIT
    45                        *           ASEC,AMIN,AHR,ADAY,AMONTH,AYR,ADAYWK
    46                        * Routines Called: NONE
    47                        * Returned Reg: NONE
    48                        *
    49                        
    50             0000F8F8   TODIRQ   EQU*           MONITOR TIME OF DAY IRQ
    51 00:F8F8: 48                    PHA
    52 00:F8F9: A9 20        	 LDA #T2FLG      RESET TIMER 2 IRQ
    53 00:F8FB: 04 08                 TSB IFR2
    54 00:F8FD: 5A                    PHY
    55 00:F8FE: DA                    PHX
    56 00:F8FF: A9 FF        	 LDA #$FF        RESET WATCHDOG TIMER 'M'
    57 00:F901: 85 28                 STA TMLL
    58 00:F903: 85 2A                 STA TMCL
    59 00:F905: 85 29                 STA TMLH
    60 00:F907: 85 2B                 STA TMCH
    61 00:F909: E6 63        	 INC SEC         INCREMENT SECONDS
    62 00:F90B: A9 3B                 LDA #59
    63 00:F90D: C5 63                 CMP SEC
    64 00:F90F: B0 34                 BCS EXITOCT
    65 00:F911: 64 63        	 STZ SEC         ROLLED OVER
    66                        
    67 00:F913: E6 64        	 INC MIN         INCREMENT MINUTES
    68 00:F915: C5 64                 CMP MIN
    69 00:F917: B0 2C                 BCS EXITOCT
    70 00:F919: 64 64        	 STZ MIN         ROLLED OVER
    71                        
    72 00:F91B: E6 65        	 INC HR          INCREMENT HOUR
    73 00:F91D: A5 65                 LDA HR
    74 00:F91F: C9 01                 CMP #1
    75 00:F921: D0 24                 BNE TODINT8
    76 00:F923: A9 01        OCTOBER  LDA #DAYLITFLG  IS DAYLIGHT SAVINGS ON
    77 00:F925: 24 6A                 BIT DAYLIT
    78 00:F927: F0 1C                 BEQ EXITOCT
    79 00:F929: A5 67                 LDA MONTH
    80 00:F92B: C9 0A        	 CMP #10         IS IT OCTOBER
    81 00:F92D: D0 16                 BNE EXITOCT
    82 00:F92F: A5 69        	 LDA DAYWK       IS IT SUNDAY
    83 00:F931: C9 01                 CMP #$01
    84 00:F933: D0 10        	 BNE EXITOCT     NO
    85 00:F935: A5 66        	 LDA DAY         IS IT LAST SUNDAY
    86 00:F937: C9 19                 CMP #25
    87 00:F939: 90 0A                 BCC EXITOCT
    88 00:F93B: A9 80        	 LDA #DAYLPROG   CK IF ALREADY SET BACK
    89 00:F93D: 14 6A                 TRB DAYLIT
    90 00:F93F: D0 04                 BNE EXITOCT
    91 00:F941: 04 6A                 TSB DAYLIT
    92 00:F943: 64 65                 STZ HR
    93 00:F945: 80 4F        EXITOCT  BRA T2EXIT
    94                        
    95                        
  Wed Oct 18 2000 14:10                                                                                                    Page 55

    'W65C134 Internal ROM Monitor ($F000)'
    'MON4.ASM - Time of day clock IRQ routine'

    96             0000F947   TODINT8  EQU*
    97 00:F947: C9 18                 CMP #24
    98 00:F949: 90 02                 BCC EXITA6
    99 00:F94B: 64 65        	 STZ HR          ROLLED OVER
   100 00:F94D: A5 65        EXITA6   LDA HR
   101 00:F94F: F0 02                 BEQ TODINT9
   102 00:F951: 80 43                 BRA T2EXIT
   103                        
   104 00:F953: E6 69        TODINT9  INC DAYWK
   105 00:F955: A5 69                 LDA DAYWK
   106 00:F957: C9 07                 CMP #7
   107 00:F959: 90 04                 BCC INCDAY
   108 00:F95B: A9 01                 LDA #1
   109 00:F95D: 85 69        	 STA DAYWK       ROLLED OVER
   110                        
   111 00:F95F: E6 66        INCDAY   INC DAY
   112 00:F961: A9 01        	 LDA #DAYLITFLG  IS DAY LIGHT SAVINGS ON
   113 00:F963: 24 6A                 BIT DAYLIT
   114 00:F965: F0 06        	 BEQ INCADAY     NO
   115 00:F967: A5 67                 LDA MONTH
   116 00:F969: C9 04        	 CMP #4          IS IT APRIL
   117 00:F96B: F0 64                 BEQ APRIL
   118 00:F96D: A5 66        INCADAY  LDA DAY         INCREMENT DAYS
   119 00:F96F: A6 67                 LDX MONTH
   120 00:F971: DD 94 FF              CMP LASTDY-1,X
   121 00:F974: 90 20                 BCC T2EXIT
   122                        
   123 00:F976: E0 02        	 CPX #2          INCREMENT MONTH
   124 00:F978: D0 0C        	 BNE INCMTH      NOT FEBRUARY
   125 00:F97A: A5 68                 LDA YR
   126 00:F97C: 25 03        	 AND <%00000011   IS IT LEAP YR
   127 00:F97E: D0 06                 BNE INCMTH
   128                        
   129 00:F980: A5 66        	 LDA DAY         ITS FEB AND LEAP YR
   130 00:F982: C9 1D                 CMP #29
   131 00:F984: F0 10                 BEQ T2EXIT
   132                        
   133 00:F986: A0 01        INCMTH   LDY #1          ROLLED OVER
   134 00:F988: 84 66                 STY DAY
   135 00:F98A: E6 67                 INC MONTH
   136 00:F98C: A5 67                 LDA MONTH
   137 00:F98E: C9 0D                 CMP #13
   138 00:F990: 90 04                 BCC T2EXIT
   139 00:F992: 84 67        	 STY MONTH       MONTH 1= JAN
   140                        
   141 00:F994: E6 68                 INC YR
   142                        
   143                        
   144             0000F996   T2EXIT   EQU*
   145 00:F996: A5 77        	 LDA DISPTYP     CK IF ALARM ENABLED
   146 00:F998: 89 08                 BIT #ALRMENAB
   147 00:F99A: F0 23                 BEQ EXITA
   148 00:F99C: A5 6B        	 LDA ASEC        CHK IF ALARM CLOCK IS
   149 00:F99E: 05 6C        	 ORA AMIN        RUNNING
   150 00:F9A0: 05 6D                 ORA AHR
   151 00:F9A2: 05 6E                 ORA ADAY
  Wed Oct 18 2000 14:10                                                                                                    Page 56

    'W65C134 Internal ROM Monitor ($F000)'
    'MON4.ASM - Time of day clock IRQ routine'

   152 00:F9A4: 05 71                 ORA ADAYWK
   153 00:F9A6: 05 6F                 ORA AMONTH
   154 00:F9A8: 05 70                 ORA AYR
   155 00:F9AA: F0 13                 BEQ EXITA
   156                        *                        CHK IF WE HAVE AN ALARM
   157 00:F9AC: A2 07                 LDX #DFLTSEND-DFLTS-1
   158 00:F9AE: B5 6A        CKALARM  LDA ASEC-1,X
   159 00:F9B0: C9 FF                 CMP #$FF
   160 00:F9B2: F0 04                 BEQ CKAL1
   161 00:F9B4: D5 62                 CMP SEC-1,X
   162 00:F9B6: D0 07                 BNE EXITA
   163                        
   164 00:F9B8: CA           CKAL1    DEX
   165 00:F9B9: D0 F3                 BNE CKALARM
   166 00:F9BB: A9 10        	 LDA #ALRMIRQ    SET ALARM FLAG
   167 00:F9BD: 04 77                 TSB DISPTYP
   168             0000F9BF   EXITA    EQU*
   169 00:F9BF: A2 07        	 LDX #DFLTSEND-DFLTS-1  LOAD TOD CHECKSUM
   170 00:F9C1: A9 00                 LDA #00
   171 00:F9C3: 18                    CLC
   172 00:F9C4: 75 62        CLKSUM   ADC SEC-1,X
   173 00:F9C6: CA                    DEX
   174 00:F9C7: D0 FB                 BNE CLKSUM
   175 00:F9C9: 49 FF                 EOR #$FF
   176 00:F9CB: 85 60                 STA TODCKS
   177 00:F9CD: FA                    PLX
   178 00:F9CE: 7A                    PLY
   179 00:F9CF: 68                    PLA
   180 00:F9D0: 40                    RTI
   181                        
   182 00:F9D1: A5 69        APRIL    LDA DAYWK       IS IT SUNDAY
   183 00:F9D3: C9 01                 CMP #$01
   184 00:F9D5: D0 96        	 BNE INCADAY     NO
   185 00:F9D7: A5 66        	 LDA DAY         IS IT 1ST SUNDAY
   186 00:F9D9: C9 08                 CMP #8
   187 00:F9DB: 90 03                 BCC APR1
   188 00:F9DD: 4C 6D F9              JMP INCADAY
   189                        
   190                        
   191 00:F9E0: A9 01        APR1     LDA #1
   192 00:F9E2: 85 65                 STA HR
   193 00:F9E4: 80 B0                 BRA T2EXIT
   194                        
   195                                 STTL 'MON4.ASM - General ToD subroutines'
   196                                 PAGE
   197                        
  Wed Oct 18 2000 14:10                                                                                                    Page 57

    'W65C134 Internal ROM Monitor ($F000)'
    'MON4.ASM - General ToD subroutines'

   198                        * Routine:  RTC_MODE
   199                        *
   200                        * Reg Used: ACC
   201                        * Var Used: DAYLIT
   202                        * Routines Called: NONE
   203                        * Returned Reg: NONE
   204                        *
   205                        
   206             0000F9E6   RTC_MODE EQU*           ENABLE/DISABLE DAYLIGHT
   207 00:F9E6: 30 12        	 BMI RTC_ERR     VALUE EITHER 0 OR 1 ONLY
   208 00:F9E8: C9 02                 CMP #$02
   209 00:F9EA: B0 0E                 BCS RTC_ERR
   210 00:F9EC: F0 06                 BEQ RTC0
   211 00:F9EE: A9 01                 LDA #DAYLITFLG
   212 00:F9F0: 04 6A        	 TSB DAYLIT      SAVINGS TIME
   213 00:F9F2: 80 04                 BRA RTC1
   214                        
   215 00:F9F4: A9 01        RTC0 LDA #DAYLITFLG
   216 00:F9F6: 14 6A                 TRB DAYLIT
   217 00:F9F8: 18           RTC1     CLC
   218 00:F9F9: 60                    RTS
   219                        
   220 00:F9FA: 38           RTC_ERR  SEC             ERROR IN PARAMETERS
   221 00:F9FB: 60                    RTS
   222                        
   223                        * Routine:  RD_CLOCK
   224                        *
   225                        * Reg Used: ACC,Y,X
   226                        * Var Used: TMP0
   227                        * Routines Called: NONE
   228                        * Returned Reg: NONE             Y REG is RESTORED
   229                        *
   230                        
   231             0000F9FC   RD_CLOCK EQU*           READS CLOCK HR,MIN,SEC
   232 00:F9FC: 5A           	 PHY             MONTH,DAY,YR
   233 00:F9FD: 85 7B                 STA TMP0
   234 00:F9FF: 86 7C                 STX TMP0+1
   235 00:FA01: 08                    PHP
   236 00:FA02: 78                    SEI
   237 00:FA03: A0 00                 LDY #0
   238                        
   239 00:FA05: B9 63 00     RD_CLP   LDA |SEC,Y
   240 00:FA08: 91 7B                 STA (TMP0),Y
   241 00:FA0A: C8                    INY
   242 00:FA0B: C0 07                 CPY #7
   243 00:FA0D: D0 F6                 BNE RD_CLP
   244 00:FA0F: 28                    PLP
   245 00:FA10: 7A                    PLY
   246 00:FA11: 60                    RTS
   247                        
   248                        
   249                        
   250                        * Routine:  WR_CLOCK
   251                        *
   252                        * Reg Used: ACC,X,Y
   253                        * Var Used: TMP0
  Wed Oct 18 2000 14:10                                                                                                    Page 58

    'W65C134 Internal ROM Monitor ($F000)'
    'MON4.ASM - General ToD subroutines'

   254                        * Routines Called: NONE
   255                        * Returned Reg: NONE             Y REG is RESTORED
   256                        *
   257                        
   258             0000FA12   WR_CLOCK EQU*           WRITES CLOCK SEC,MIN,HR
   259 00:FA12: 5A           	 PHY             MONTH,DAY,YR,DofW
   260 00:FA13: 85 7B                 STA TMP0
   261 00:FA15: 86 7C                 STX TMP0+1
   262 00:FA17: A0 00                 LDY #0
   263 00:FA19: 08                    PHP
   264 00:FA1A: 78                    SEI
   265 00:FA1B: B1 7B        WR_CLP   LDA (TMP0),Y
   266 00:FA1D: 99 63 00     	 STA |SEC,Y
   267 00:FA20: C8                    INY
   268 00:FA21: C0 07                 CPY #7
   269 00:FA23: D0 F6                 BNE WR_CLP
   270 00:FA25: 28                    PLP
   271 00:FA26: 7A                    PLY
   272 00:FA27: 60                    RTS
   273                        
   274                        
   275                        
   276                        
   277                        *        Alarm Clock:  To use the alarm clock, you set it using the routine
   278                        *                      below.  You must set all 7 parameters, but if you set
   279                        *                      any of them to $FF, it will be ignored.  For example,
   280                        *                      if you want the alarm clock to go off at 1:00 pm on
   281                        *                      Saturdays, you would set it to:
   282                        
   283                        *                      00 00 0D FF FF FF 07
   284                        
   285                        *                      This is zero seconds, zero minutes, 13 hours,
   286                        *                      any day, any month, any year, and the 7th day of the
   287                        *                      week (Sun = 1, Sat = 7).
   288                        
   289                        *                      Once set, you must enable the alarm clock.  This is
   290                        *                      by setting bit 3 of location $77 to a '1'.  If you
   291                        *                      want to turn it off (which saves a bit of interrupt
   292                        *                      time), set the enable bit to a 0.
   293                        
   294                        *                      When the appropriate time hits, the clock interrupt
   295                        *                      will set a flag.  The flag is bit 4 of location $77.
   296                        *                      A '1' in that bit indicates the alarm went off.  The
   297                        *                      flag stays set until you reset it.
   298                        
   299                        *                      Remember that 'ANY' is just that  if you set the alarm
   300                        *                      for Jan 3, 1990 by using: FF FF FF 03 01 5A FF,
   301                        *                      you'll get an alarm set every second all day long on
   302                        *                      Jan 3, 1990.  Note also that if you want a specific
   303                        *                      time and date, you should set the day of the week to
   304                        *                      'ANY' to avoid a mis-match.
   305                        
   306                        *                      If you want every other day, then you'll have to set
   307                        *                      the alarm for every day and check for every other day
   308                        *                      by yourself.
   309                        
  Wed Oct 18 2000 14:10                                                                                                    Page 59

    'W65C134 Internal ROM Monitor ($F000)'
    'MON4.ASM - General ToD subroutines'

   310                        
   311                        
   312                        
   313                        
   314                        
   315                        
   316                        * Routine:  WR_ACLOCK
   317                        *
   318                        * Reg Used: ACC,X
   319                        * Var Used: TMP0
   320                        * Routines Called: NONE
   321                        * Returned Reg: NONE           Y REG is RESTORED
   322                        *
   323                        
   324             0000FA28   WR_ACLOCK EQU*          WRITES ALARM CLOCK DATA
   325 00:FA28: 5A           	 PHY             MONTH,DAY,YR
   326 00:FA29: 85 7B        	 STA TMP0        A has low address of alarm time
   327 00:FA2B: 86 7C        	 STX TMP0+1      X has high address of alarm time
   328 00:FA2D: 08                    PHP
   329 00:FA2E: 78           	 SEI             no alarms in the middle of setting it, please.
   330 00:FA2F: A0 00                 LDY #0
   331 00:FA31: B1 7B        WR_ACLP  LDA (TMP0),Y
   332 00:FA33: 99 6B 00     	 STA |ASEC,Y
   333 00:FA36: C8                    INY
   334 00:FA37: C0 07                 CPY #7
   335 00:FA39: D0 F6                 BNE WR_ACLP
   336 00:FA3B: 28                    PLP
   337 00:FA3C: 7A                    PLY
   338 00:FA3D: 60                    RTS
   339                        
   340                        
   341                        
   342                        * Routine:  SNDTOD
   343                        *
   344                        * Reg Used: ACC,X
   345                        * Var Used:
   346                        * Routines Called: SNDT1,SPAC,OUTCH,SNDTIME,CRLF
   347                        * Returned Reg: NONE
   348                        *
   349                        * WARNING: if the time rolls in the middle of this, the result is wrong.
   350                        *
   351                        
   352 00:FA3E: A5 69        SNDTOD   LDA DAYWK       SEND OUT TOD CLOCK
   353 00:FA40: 20 87 FA              JSR SNDT1
   354 00:FA43: 20 09 FC              JSR SPAC
   355 00:FA46: A5 67                 LDA MONTH
   356 00:FA48: 20 87 FA              JSR SNDT1
   357 00:FA4B: A9 2F                 LDA #'/'
   358 00:FA4D: 20 11 FC              JSR OUTCH
   359 00:FA50: A5 66                 LDA DAY
   360 00:FA52: 20 87 FA              JSR SNDT1
   361 00:FA55: A9 2F                 LDA #'/'
   362 00:FA57: 20 11 FC              JSR OUTCH
   363 00:FA5A: A9 13                 LDA #19
   364 00:FA5C: 20 87 FA              JSR SNDT1
   365 00:FA5F: A5 68                 LDA YR
  Wed Oct 18 2000 14:10                                                                                                    Page 60

    'W65C134 Internal ROM Monitor ($F000)'
    'MON4.ASM - General ToD subroutines'

   366 00:FA61: 20 87 FA              JSR SNDT1
   367 00:FA64: 20 04 FC              JSR SPAC2
   368 00:FA67: 20 6D FA     	 JSR SNDTIME     DISPLAY TIME
   369 00:FA6A: 4C F4 FB              JMP CRLF
   370                        
   371                        
   372                        * Routine:  SNDTIME
   373                        *
   374                        * Reg Used: ACC,X
   375                        * Var Used:
   376                        * Routines Called: SNDT1,OUTCH,BINASC,WRTWO
   377                        * Returned Reg: NONE
   378                        *
   379                        * WARNING: if the time rolls in the middle, output will be wrong
   380                        *
   381                        
   382 00:FA6D: A5 65        SNDTIME  LDA HR
   383 00:FA6F: 20 87 FA              JSR SNDT1
   384 00:FA72: A9 3A                 LDA #':'
   385 00:FA74: 20 11 FC              JSR OUTCH
   386 00:FA77: B0 17                 BCS SNDTDONE
   387 00:FA79: A5 64                 LDA MIN
   388 00:FA7B: 20 87 FA              JSR SNDT1
   389 00:FA7E: A9 3A                 LDA #':'
   390 00:FA80: 20 11 FC              JSR OUTCH
   391 00:FA83: B0 0B                 BCS SNDTDONE
   392 00:FA85: A5 63                 LDA SEC
   393                        
   394 00:FA87: 20 31 FE     SNDT1    JSR BIN2DEC
   395 00:FA8A: 20 59 FC              JSR BINASC
   396 00:FA8D: 20 F8 FB              JSR WRTWO
   397 00:FA90: 60           SNDTDONE RTS
   398                        
   399                        
   400                        
   401                        	 ENDS
   402                        
     1                        	 STTL 'MON5.ASM - Serial Routines'
     2                        	 PAGE
     3                        *        06-23-1993
  Wed Oct 18 2000 14:10                                                                                                    Page 61

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

     4                        	 CODE
     5                        
     6                        * Routine:  IRQAR
     7                        *
     8                        * Reg Used: ACC & Y
     9                        * Var Used: SFLAG,SINEND
    10                        * Routines Called: FLUSH_SERIAL_BUFF
    11                        * Returned Reg: NONE
    12                        *
    13                        
    14                        *                        CALLED BY IRQ ROUTINE
    15             0000FA91   IRQAR    EQU*           QUEUE UP SERIAL BYTE
    16 00:FA91: 48                    PHA
    17 00:FA92: 5A                    PHY
    18 00:FA93: A5 23        	 LDA ARTD        GET DATA
    19 00:FA95: 29 7F        	 AND #$7F        MAKE ASCII
    20 00:FA97: D0 03                 BNE RQ5
    21 00:FA99: 4C 2B FB     	 JMP RECDONE     CHK FOR NULL
    22                        
    23                        
    24 00:FA9C: C9 19        RQ5      CMP #$19        QUICK CHK FOR CNTRL CHAR
    25 00:FA9E: B0 2F                 BCS RQ8
    26 00:FAA0: C9 03        	 CMP #CNTRLC     CHK IF CONTROL 'C'
    27 00:FAA2: D0 14                 BNE RQ6
    28 00:FAA4: 20 B4 FD     RECSC0   JSR FLUSH_SERIAL_BUFF  GOT A CONTROL 'C'
    29 00:FAA7: A5 72                 LDA SFLAG
    30 00:FAA9: 29 FE        	 AND #$FF-SFLG   CLR CHAR PENDING FLG
    31 00:FAAB: 09 02        	 ORA #CFLG       SO FLUSH QUEUE
    32 00:FAAD: 89 04                 BIT #XONOFLG
    33 00:FAAF: F0 02                 BEQ RECSC1
    34 00:FAB1: 09 90                 ORA #SXONFLG+LASTXONOF
    35 00:FAB3: 85 72        RECSC1   STA SFLAG
    36 00:FAB5: 4C 2B FB              JMP RECDONE
    37                        
    38                        
    39                        
    40 00:FAB8: C9 18        RQ6      CMP #CNTRLX     CHK IF CONTROL 'X'
    41 00:FABA: F0 E8                 BEQ RECSC0
    42 00:FABC: 48                    PHA
    43 00:FABD: A5 72                 LDA SFLAG
    44 00:FABF: 89 04                 BIT #XONOFLG
    45 00:FAC1: F0 0B                 BEQ RQ7A
    46 00:FAC3: 68                    PLA
    47 00:FAC4: C9 13        	 CMP #XOFF       CHK XON/XOFF PROTOC
    48 00:FAC6: F0 53                 BEQ RECSXOFF
    49 00:FAC8: C9 11                 CMP #XON
    50 00:FACA: F0 55                 BEQ RECSXON
    51 00:FACC: 80 01                 BRA RQ8
    52                        
    53 00:FACE: 68           RQ7A     PLA
    54 00:FACF: A4 75        RQ8      LDY SININDX     GET CURRENT PTR
    55 00:FAD1: C8                    INY
    56 00:FAD2: C4 76        	 CPY SINEND      IS BUFF FULL
    57 00:FAD4: D0 0D                 BNE RQ9
    58 00:FAD6: 48                    PHA
    59 00:FAD7: A5 76                 LDA SINEND
  Wed Oct 18 2000 14:10                                                                                                    Page 62

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

    60 00:FAD9: 1A           	 INC A           REMOVE OLDEST CHAR
    61 00:FADA: C5 56                 CMP SINCNT
    62 00:FADC: D0 02                 BNE RQ8A
    63 00:FADE: A9 00                 LDA #$00
    64 00:FAE0: 85 76        RQ8A     STA SINEND
    65 00:FAE2: 68                    PLA
    66 00:FAE3: C4 56        RQ9      CPY SINCNT      GET SIZE OF QUEUE
    67 00:FAE5: 90 02        	 BCC RECS11      CK FOR WRAP AROUND
    68 00:FAE7: A0 00        	 LDY #0          WRAP AROUND
    69 00:FAE9: 84 75        RECS11   STY SININDX
    70 00:FAEB: 91 52        	 STA (SINPTR),Y  SAVE DATA IN QUE
    71 00:FAED: A9 01                 LDA #SFLG
    72 00:FAEF: 04 72                 TSB SFLAG
    73 00:FAF1: C8           	 INY             IS BUFF ALMOST FULL?
    74 00:FAF2: C8                    INY
    75 00:FAF3: C8                    INY
    76 00:FAF4: C8                    INY
    77 00:FAF5: C8                    INY
    78                        
    79 00:FAF6: C4 56        	 CPY SINCNT      GET SIZE OF QUEUE
    80 00:FAF8: 90 05                 BCC RQ0
    81 00:FAFA: 98                    TYA
    82 00:FAFB: 38                    SEC
    83 00:FAFC: E5 56                 SBC SINCNT
    84 00:FAFE: A8                    TAY
    85 00:FAFF: C4 76        RQ0      CPY SINEND      We'll kill buffer control if IN+5 = END
    86 00:FB01: D0 28        	 BNE RECDONE     branch if we haven't hit the stop point
    87                              
    88             0000FB03   RQ1      EQU*
    89 00:FB03: A5 72        	 LDA SFLAG       XON/XOFF OR DTR?
    90 00:FB05: 89 04                 BIT #XONOFLG
    91 00:FB07: F0 0C                 BEQ SNDXOFFHW
    92 00:FB09: 89 10                 BIT #LASTXONOF
    93 00:FB0B: F0 1E        	 BEQ RECDONE     ALREADY SENT XOFF
    94 00:FB0D: 29 EF        	 AND #$FF-LASTXONOF    SEND XOFF NXT XMIT IRQ
    95 00:FB0F: 09 40        	 ORA #SXOFFLG    XON/XOFF HS
    96 00:FB11: 85 72                 STA SFLAG
    97 00:FB13: 80 10                 BRA RECDONET
    98                        
    99             0000FB15   SNDXOFFHW EQU*
   100 00:FB15: A9 04        	 LDA #DTR        SETUP HW HS
   101 00:FB17: 04 20        	 TSB PD6         DTR HIGH
   102 00:FB19: 80 10        	 BRA RECDONE     HOLD OFF FURTHER XMISSION
   103                        
   104                        
   105 00:FB1B: A9 08        RECSXOFF LDA #SNDOVF     OVERRUNNING OTHER GUYS
   106 00:FB1D: 04 72        	 TSB SFLAG       SERIAL INPUT BUFFER SO
   107 00:FB1F: 80 0A                 BRA RECDONE
   108                        
   109                        
   110 00:FB21: A9 08        RECSXON  LDA #SNDOVF     OVERFLOW ON XMIT OVER
   111 00:FB23: 14 72                 TRB SFLAG
   112                        
   113 00:FB25: A5 22        RECDONET LDA ACSR        TURN ON SERIAL XMIT
   114 00:FB27: 09 03                 ORA #$03
   115 00:FB29: 85 22                 STA ACSR
  Wed Oct 18 2000 14:10                                                                                                    Page 63

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   116                        
   117 00:FB2B: 7A           RECDONE  PLY             RECEIVE IRQ DONE
   118 00:FB2C: 68                    PLA
   119 00:FB2D: 40                    RTI
   120                        	 PAGE
   121                        
  Wed Oct 18 2000 14:10                                                                                                    Page 64

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   122                        * Routine:  IRQAT
   123                        *
   124                        * Reg Used: ACC & Y
   125                        * Var Used: SFLAG,SOUTINDX
   126                        * Routines Called: NONE
   127                        * Returned Reg: NONE
   128                        *
   129                        *                        CALLED BY IRQ ROUTINE
   130             0000FB2E   IRQAT    EQU*           DEQUEUE SERIAL BYTE
   131 00:FB2E: 48           	 PHA             FROM OUTPUT BUFFER
   132 00:FB2F: 5A           	 PHY             SEE OUTCH ROUTINE
   133 00:FB30: A5 72        	 LDA SFLAG       CK IF WE ARE OVERFLOWING
   134 00:FB32: 29 C0                 AND #SXOFFLG+SXONFLG
   135 00:FB34: F0 1C        	 BEQ SQ0A        QUICK CK FOR CNTRL FLGS
   136 00:FB36: C9 C0                 CMP #SXOFFLG+SXONFLG
   137 00:FB38: F0 14                 BEQ IRQATERR
   138 00:FB3A: 89 40                 BIT #SXOFFLG
   139 00:FB3C: D0 08        	 BNE SNDXOFF     SEND XOFF
   140 00:FB3E: A9 80        SNDXON   LDA #SXONFLG
   141 00:FB40: 14 72                 TRB SFLAG
   142 00:FB42: A9 11                 LDA #XON
   143 00:FB44: 80 3F                 BRA SQ1
   144                        
   145                        
   146             0000FB46   SNDXOFF  EQU*
   147 00:FB46: A9 50                 LDA #SXOFFLG+LASTXONOF
   148 00:FB48: 14 72                 TRB SFLAG
   149 00:FB4A: A9 13                 LDA #XOFF
   150 00:FB4C: 80 37                 BRA SQ1
   151                        
   152 00:FB4E: A9 C0        IRQATERR LDA #SXONFLG+SXOFFLG
   153 00:FB50: 14 72                 TRB SFLAG
   154 00:FB52: A5 22        SQ0A     LDA ACSR
   155 00:FB54: 29 02        	 AND #$02              XMIT IRQ ON
   156 00:FB56: D0 10                 BNE XIRQ1
   157 00:FB58: A4 73        XIRQ2    LDY SOUTINDX    IS BUFFER NOW EMPTY
   158 00:FB5A: C4 74                 CPY SOUTEND
   159 00:FB5C: D0 1C                 BNE XIRQ3
   160 00:FB5E: A5 22        	 LDA ACSR        DISABLE SERIAL XMIT
   161 00:FB60: 29 02        	 AND #$02        EVERYTHING IS OUT OF
   162 00:FB62: D0 43                 BNE SQ3A
   163 00:FB64: A9 00                 LDA #00
   164 00:FB66: 80 1D                 BRA SQ1
   165                        
   166 00:FB68: A5 72        XIRQ1    LDA SFLAG
   167 00:FB6A: 89 04                 BIT #XONOFLG
   168 00:FB6C: D0 06                 BNE XIRQ1A
   169 00:FB6E: A5 1C        	 LDA PD4          DSR = P47
   170 00:FB70: 30 35                 BMI SQ3A
   171 00:FB72: 80 E4                 BRA XIRQ2
   172                        
   173 00:FB74: 89 08        XIRQ1A   BIT #SNDOVF
   174 00:FB76: F0 E0                 BEQ XIRQ2
   175 00:FB78: 80 2D                 BRA SQ3A
   176                        
   177 00:FB7A: C8           XIRQ3    INY
  Wed Oct 18 2000 14:10                                                                                                    Page 65

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   178 00:FB7B: C4 57        	 CPY SOUTCNT     GET SIZE OF QUEUE
   179 00:FB7D: 90 02                 BCC SQ0
   180 00:FB7F: A0 00                 LDY #0
   181 00:FB81: 84 73        SQ0      STY SOUTINDX
   182 00:FB83: B1 54        	 LDA (SOUTPTR),Y  GET DATA FROM QUEUE
   183 00:FB85: 85 23        SQ1      STA ARTD        SEND DATA
   184 00:FB87: A5 72                 LDA SFLAG
   185 00:FB89: 89 04                 BIT #XONOFLG
   186 00:FB8B: D0 04                 BNE SQ2
   187 00:FB8D: A5 1C                 LDA PD4
   188 00:FB8F: 30 21        	 BMI SQ3         P47 HI     DSR TEST
   189 00:FB91: A5 72        SQ2      LDA SFLAG
   190 00:FB93: 89 08                 BIT #SNDOVF
   191 00:FB95: D0 1B                 BNE SQ3
   192 00:FB97: A4 73                 LDY SOUTINDX
   193 00:FB99: C4 74        	 CPY SOUTEND     IS BUFF EMPTY
   194 00:FB9B: F0 15                 BEQ SQ3
   195 00:FB9D: A5 22                 LDA ACSR
   196 00:FB9F: 29 FC                 AND #$FC
   197 00:FBA1: 09 01                 ORA #SON
   198 00:FBA3: 85 22                 STA ACSR
   199 00:FBA5: 80 84                 BRA RECDONE
   200                        
   201 00:FBA7: A9 02        SQ3A     LDA #$02        set the output high to prevent falsing
   202 00:FBA9: 04 20        	 TSB PD6         when we shut it off.
   203 00:FBAB: A9 03        	 LDA #$03        NO MORE CHAR
   204 00:FBAD: 14 22        	 TRB ACSR        turn ACSR off
   205 00:FBAF: 4C 2B FB              JMP RECDONE
   206                        
   207 00:FBB2: A9 03        SQ3      LDA #$03        TURN ON XMIT & RECV
   208 00:FBB4: 04 22                 TSB ACSR
   209 00:FBB6: 4C 2B FB              JMP RECDONE
   210                        
   211                        	 PAGE 'HARDWARE HANDSHAKE'
   212                        
  Wed Oct 18 2000 14:10                                                                                                    Page 66

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   213                        
   214 00:FBB9: 48           NE47     PHA             HARDWARE HS INPUT
   215 00:FBBA: A9 08        	 LDA #$08        DSR
   216 00:FBBC: 04 2C        	 TSB IFR1        RESET IRQ
   217 00:FBBE: A5 72                 LDA SFLAG
   218 00:FBC0: 89 04                 BIT #XONOFLG
   219 00:FBC2: D0 08        	 BNE NE47A       XON/XOFF MODE
   220 00:FBC4: A5 22                 LDA ACSR
   221 00:FBC6: 09 03                 ORA #SON+$02
   222 00:FBC8: 85 22                 STA ACSR
   223 00:FBCA: 80 04                 BRA NE47B
   224                        
   225 00:FBCC: A9 08        NE47A    LDA #$08        DISABLE NE47 IRQS
   226 00:FBCE: 14 2D        	 TRB IER1        SHOULD BE IN XON/XOFF MODE
   227 00:FBD0: 68           NE47B    PLA
   228 00:FBD1: 40                    RTI
   229                        
   230                        
   231                        
   232                        * SERIAL WRITES
   233                        
   234                        
   235                        * Routine:  WR_ADDR
   236                        *
   237                        * Reg Used: ACC & X
   238                        * Var Used: TMPC,TMP0
   239                        * Routines Called: WROB,BINASC,WRTWO
   240                        * Returned Reg: NONE                  X & Y REG are PRESERVED
   241                        *
   242                        
   243 00:FBD2: 85 7B        WR_ADDR  STA TMP0        WRITE ADDRESS IN TMP0
   244 00:FBD4: 86 7C                 STX TMP0+1
   245                        *                        WRITE ADDR FROM TMP0
   246 00:FBD6: A2 01        WROA     LDX #1          DISPLAY TMP0
   247 00:FBD8: 80 06                 BRA WROA1
   248                        
   249 00:FBDA: A2 07        WROA4    LDX #TMP4-TMP0+1 
   250 00:FBDC: 80 02        	 BRA WROA1       USUALLY CHKSUM
   251                        
   252 00:FBDE: A2 DE        WRPC     LDX #PCL-TMP0+1  DISPLAY PROGRAM CTR
   253 00:FBE0: B5 7A        WROA1    LDA TMP0-1,X
   254 00:FBE2: 48                    PHA
   255 00:FBE3: B5 7B                 LDA TMP0,X
   256 00:FBE5: 20 EB FB              JSR WROB
   257 00:FBE8: B0 18        	 BCS WRTWORTS    GOT A CNTRL 'C'
   258 00:FBEA: 68                    PLA
   259                        
   260 00:FBEB: DA           WROB     PHX             WRITE BYTE AS 2 HEX CHAR
   261 00:FBEC: 20 59 FC     	 JSR BINASC      UNPACK BYTE DATA INTO
   262                        *                        TWO ASCII CHARS.
   263 00:FBEF: 20 F8 FB     	 JSR WRTWO       X,A=CHARS
   264 00:FBF2: FA                    PLX
   265 00:FBF3: 60                    RTS
   266                        
   267                        
   268 00:FBF4: A9 0D        CRLF     LDA #$0D        OUTPUT CR WITH AUTO LF
  Wed Oct 18 2000 14:10                                                                                                    Page 67

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   269 00:FBF6: 80 19                 BRA OUTCH
   270                        
   271 00:FBF8: 48           WRTWO    PHA             WRITE 2 CHARS-X,A=CHARS
   272 00:FBF9: 8A           	 TXA             WRITE X FIRST
   273 00:FBFA: 20 11 FC              JSR OUTCH
   274 00:FBFD: B0 03                 BCS WRTWORTS
   275 00:FBFF: 68                    PLA
   276 00:FC00: 80 0F                 BRA OUTCH
   277                        
   278 00:FC02: 68           WRTWORTS PLA             GOT A CNTRL 'C'
   279 00:FC03: 60           SPACRTS  RTS
   280                        
   281                        
   282                        * Routine:  SPAC2
   283                        *
   284                        * Reg Used: ACC
   285                        * Var Used: NONE
   286                        * Routines Called: SPAC
   287                        * Returned Reg: Acc X & Y REG are PRESERVED
   288                        *
   289                        
   290                        
   291 00:FC04: 20 09 FC     SPAC2    JSR SPAC
   292 00:FC07: B0 FA        	 BCS SPACRTS     GOT ^C
   293 00:FC09: 48           SPAC     PHA
   294 00:FC0A: A9 20                 LDA #' '
   295 00:FC0C: 20 11 FC              JSR OUTCH
   296 00:FC0F: 68                    PLA
   297 00:FC10: 60                    RTS
   298                        
   299                        
   300                        * Routine:  OUTCH
   301                        *
   302                        * Reg Used: Acc & Y
   303                        * Var Used: SOUTEND
   304                        * Routines Called: NONE
   305                        * Returned Reg: Acc                     X & Y REG are PRESERVED
   306                        *
   307                        
   308                        
   309             0000FC11   OUTCH    EQU*           PLACE CHAR IN OUTPUT
   310 00:FC11: 48           	 PHA             QUEUE
   311 00:FC12: 5A           	 PHY             SAVE YREG
   312 00:FC13: 48                    PHA
   313 00:FC14: A4 74        OUTCH1   LDY SOUTEND     CK IF CURRENT QUEUE POS
   314 00:FC16: C8           	 INY             POINT TO NXT DATA
   315 00:FC17: C4 57        	 CPY SOUTCNT     DO WE WRAP
   316 00:FC19: 90 02        	 BCC SNDSD2      NO
   317 00:FC1B: A0 00        	 LDY #0          WE WRAPPED
   318 00:FC1D: C4 73        SNDSD2   CPY SOUTINDX    DID WE OVERRUN QUEUE
   319 00:FC1F: F0 F3        	 BEQ OUTCH1      YES, SO WAIT
   320                        
   321 00:FC21: A5 72        	 LDA SFLAG       CK FOR CNTRL 'C'
   322 00:FC23: 89 02                 BIT #CFLG
   323 00:FC25: D0 2D        	 BNE OUTCH3      GOT CNTRL 'C'
   324 00:FC27: 78                    SEI
  Wed Oct 18 2000 14:10                                                                                                    Page 68

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   325                        
   326 00:FC28: 84 74                 STY SOUTEND
   327 00:FC2A: 68           	 PLA             GET DATA
   328 00:FC2B: 91 54        	 STA (SOUTPTR),Y  PUT DATA IN QUEUE
   329 00:FC2D: A5 72        	 LDA SFLAG       CK IF HWHS OR SOFTWARE HS
   330 00:FC2F: 89 04                 BIT #XONOFLG
   331 00:FC31: D0 06        	 BNE SNDOUT1     SW HS ON
   332 00:FC33: A5 1C        	 LDA PD4         CK IF WE ARE TO HOLD OFF
   333 00:FC35: 30 18        	 BMI OUTCH2      DONT TURN ON SERIAL IRQS
   334 00:FC37: 80 04                 BRA SNDOUT2
   335                        
   336 00:FC39: 89 08        SNDOUT1  BIT #SNDOVF     CHK FOR SW HS
   337 00:FC3B: D0 12        	 BNE OUTCH2      HAVE A XOFF SO DONT XMIT
   338                        
   339 00:FC3D: A5 22        SNDOUT2  LDA ACSR
   340 00:FC3F: 89 01        	 BIT #SON        IS SERIAL IRQ ON
   341 00:FC41: F0 08        	 BEQ OUTCH1A     NO
   342 00:FC43: 89 02        	 BIT #$02        ARE WE IN FAST SERIAL
   343 00:FC45: F0 08        	 BEQ OUTCH2      MODE--YES
   344 00:FC47: 29 FD        	 AND #$FF-$02    GOTO FAST SERIAL MODE
   345 00:FC49: 80 02                 BRA OUTCH1B
   346                        
   347 00:FC4B: 09 03        OUTCH1A  ORA #SON+$02    SERIAL IRQ SINGLE CHR MODE
   348 00:FC4D: 85 22        OUTCH1B  STA ACSR
   349 00:FC4F: 58           OUTCH2   CLI
   350 00:FC50: 7A                    PLY
   351 00:FC51: 68                    PLA
   352 00:FC52: 18                    CLC
   353 00:FC53: 60                    RTS
   354                        
   355 00:FC54: 68           OUTCH3   PLA             RESTORE STK ON CNTRL 'C'
   356 00:FC55: 7A                    PLY
   357 00:FC56: 68                    PLA
   358 00:FC57: 38                    SEC
   359 00:FC58: 60                    RTS
   360                        
   361                        
   362                        * Routine:  BINASC
   363                        *
   364                        * Reg Used: Acc & X
   365                        * Var Used: NONE
   366                        * Routines Called: ASCII
   367                        * Returned Reg: Acc & X           Y REG is PRESERVED
   368                        *
   369                        
   370 00:FC59: 48           BINASC   PHA             CONVERT BYTE TO 2
   371 00:FC5A: 4A           	 LSR A           ASCII CHAR
   372 00:FC5B: 4A                    LSR A
   373 00:FC5C: 4A                    LSR A
   374 00:FC5D: 4A                    LSR A
   375 00:FC5E: 20 65 FC     	 JSR ASCII       CONVERT TO ASCII
   376 00:FC61: AA                    TAX
   377 00:FC62: 68                    PLA
   378 00:FC63: 29 0F                 AND #LOWNIB
   379                        *                        FALL THRU TO ASCII
   380 00:FC65: 18           ASCII    CLC
  Wed Oct 18 2000 14:10                                                                                                    Page 69

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   381 00:FC66: 69 06                 ADC #6
   382 00:FC68: 69 F0                 ADC #HINIB
   383 00:FC6A: 90 02                 BCC ASC1
   384 00:FC6C: 69 06                 ADC #$06
   385 00:FC6E: 69 3A        ASC1     ADC #'9'+1      GT '9'
   386 00:FC70: 60                    RTS
   387                        
   388                        	 PAGE
   389                        
  Wed Oct 18 2000 14:10                                                                                                    Page 70

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   390                        * Routine:  GETCH
   391                        *
   392                        * Reg Used: Acc
   393                        * Var Used: NONE
   394                        * Routines Called: RD_CHAR,OUTCH
   395                        * Returned Reg: Acc               X & Y REG are PRESERVED
   396                        *
   397                        
   398 00:FC71: 20 8F FC     GETCH    JSR RD_CHAR     WAIT UNTIL WE GET A CHAR
   399 00:FC74: B0 16        	 BCS GETC4       HAD ^C,SO ERROR
   400 00:FC76: C9 00                 CMP #$00
   401 00:FC78: F0 F7        	 BEQ GETCH       WAIT FOR INPUT
   402 00:FC7A: 48           	 PHA             SAVE DATA
   403 00:FC7B: A5 72        	 LDA SFLAG       CHK IF ECHO
   404 00:FC7D: 29 20                 AND #ECHOFF
   405 00:FC7F: D0 08                 BNE GETC3
   406 00:FC81: 68                    PLA
   407 00:FC82: C9 0A        	 CMP #$0A        LINE FEED
   408 00:FC84: F0 04                 BEQ GETC3A
   409 00:FC86: 4C 11 FC     	 JMP OUTCH       ECHO BACK INPUT
   410                        *                        CY SET SO ERROR
   411                        
   412 00:FC89: 68           GETC3    PLA
   413 00:FC8A: 18           GETC3A   CLC
   414 00:FC8B: 60                    RTS
   415                        
   416 00:FC8C: A9 03        GETC4    LDA #3          %rev  SEND ^C TO CALLER
   417 00:FC8E: 60                    RTS
   418                        
   419                        
   420                        
   421                        
   422                        * Routine:  RD_CHAR
   423                        *
   424                        * Reg Used: ACC & Y
   425                        * Var Used: SINEND,SFLAG
   426                        * Routines Called: CK_CONTC
   427                        * Returned Reg: Acc             X & Y REG are PRESERVED
   428                        *
   429                        
   430                        
   431             0000FC8F   RD_CHAR  EQU*           CHK FOR CHARACTER
   432 00:FC8F: A5 72        	 LDA SFLAG       GET SERIAL BYTE
   433 00:FC91: 29 03        	 AND #SFLG+CFLG  FROM INPUT QUEUE
   434 00:FC93: F0 3E                 BEQ RD_CH0
   435 00:FC95: 5A                    PHY
   436 00:FC96: 78           	 SEI             PUT THERE BY RECSBYTE
   437 00:FC97: A4 76        	 LDY SINEND      CK IF CURRENT QUEUE POS
   438 00:FC99: C8           	 INY             POINT TO NXT DATA
   439 00:FC9A: C4 56        	 CPY SINCNT      DO WE WRAP
   440 00:FC9C: 90 02                 BCC GETSD4
   441 00:FC9E: A0 00        	 LDY #0          WE WRAPPED
   442 00:FCA0: 20 D8 FC     GETSD4   JSR CK_CONTC    RESET ^C FLAG
   443 00:FCA3: B0 30        	 BCS RD_CH2      HAD ^C
   444 00:FCA5: 84 76                 STY SINEND
   445 00:FCA7: B1 52        	 LDA (SINPTR),Y  GET DATA
  Wed Oct 18 2000 14:10                                                                                                    Page 71

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   446 00:FCA9: 48                    PHA
   447 00:FCAA: C4 75        	 CPY SININDX     IS SAME AS END OF QUEUE
   448 00:FCAC: D0 22                 BNE GETSD3
   449                        
   450 00:FCAE: A5 72        	 LDA SFLAG       CK IF XON/XOFF
   451 00:FCB0: 89 04        	 BIT #XONOFLG    OR HARDWARE HS
   452 00:FCB2: F0 14                 BEQ GETSD1
   453 00:FCB4: 89 10        	 BIT #LASTXONOF  HAS XON ALREADY BEEN SENT?
   454 00:FCB6: D0 14                 BNE GETSD2
   455 00:FCB8: A9 90                 LDA #SXONFLG+LASTXONOF 
   456 00:FCBA: 04 72                 TSB SFLAG
   457 00:FCBC: A5 22                 LDA ACSR
   458 00:FCBE: 89 01                 BIT #SON
   459 00:FCC0: D0 0A                 BNE GETSD2
   460 00:FCC2: 09 03                 ORA #SON+$02
   461 00:FCC4: 85 22                 STA ACSR
   462 00:FCC6: 80 04                 BRA GETSD2
   463                        
   464             0000FCC8   GETSD1   EQU*           HANDLE HARDWARE HS
   465 00:FCC8: A9 04        	 LDA #DTR        DTR LOW, OK FOR
   466 00:FCCA: 14 20        	 TRB PD6         OTHER GUY TO SEND
   467 00:FCCC: A9 01        GETSD2   LDA #SFLG       NO MORE SERIAL CHARS
   468 00:FCCE: 14 72                 TRB SFLAG
   469 00:FCD0: 68           GETSD3   PLA             GET DATA
   470 00:FCD1: 58                    CLI
   471 00:FCD2: 7A                    PLY
   472 00:FCD3: 18           RD_CH0   CLC             NO DATA RETURN NULL
   473 00:FCD4: 60                    RTS
   474                        
   475 00:FCD5: 58           RD_CH2   CLI             NG ^C, RETURN NULL
   476 00:FCD6: 7A           	 PLY             AND CY = 1
   477 00:FCD7: 60                    RTS
   478                        
   479                        
   480                        * Routine:  CK_CONTC
   481                        *
   482                        * Reg Used: Acc
   483                        * Var Used: SFLAG
   484                        * Routines Called: NONE
   485                        * Returned Reg: Acc
   486                        *
   487                        
   488             0000FCD8   CK_CONTC EQU*           CHK  FOR CONTROL "C"
   489 00:FCD8: A9 02                 LDA #CFLG
   490 00:FCDA: 14 72                 TRB SFLAG
   491 00:FCDC: F0 F5        	 BEQ RD_CH0      CLR CY NOT ^C
   492 00:FCDE: 38           	 SEC             FOUND CNTRL 'C'
   493 00:FCDF: 60                    RTS
   494                        
   495                        
   496                        *  READ HEX ADR, RETURN HO IN TMP0,
   497                        *  LO IN TMP0+1 AND CY=1
   498                        *  IF SPACE,CR, OR COMMA CY=0
   499                        
   500                        
   501                        * Routine:  RDOA
  Wed Oct 18 2000 14:10                                                                                                    Page 72

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   502                        *
   503                        * Reg Used: Acc
   504                        * Var Used: TMP0
   505                        * Routines Called: RDOB
   506                        * Returned Reg: Acc
   507                        *
   508                        
   509 00:FCE0: 64 7B        RDOA     STZ TMP0        CLR ADDRESS SO ALL ZEROS
   510 00:FCE2: 64 7C                 STZ TMP0+1
   511 00:FCE4: 20 FD FC     	 JSR RDOB        READ 2 CHAR BYTE
   512 00:FCE7: 90 0B        	 BCC RDOA2A      SPACE,CR OR COMMA
   513                        
   514 00:FCE9: 85 7C                 STA TMP0+1
   515 00:FCEB: 20 FD FC     	 JSR RDOB        NO NEED TO CK FOR
   516 00:FCEE: 90 07                 BCC RDOA2
   517 00:FCF0: 85 7B        	 STA TMP0        DELIMETER JUST SAVE
   518 00:FCF2: 18           	 CLC             C is clear if addr is OK
   519 00:FCF3: 60                    RTS
   520                        
   521 00:FCF4: 20 04 FC     RDOA2A   JSR SPAC2
   522 00:FCF7: 85 7B        RDOA2    STA TMP0
   523 00:FCF9: 64 7C                 STZ TMP0+1
   524 00:FCFB: 38           	 SEC             carry set if Addr = 0
   525 00:FCFC: 60                    RTS
   526                        
   527                        
   528                        *  READ HEX BYTE AND RETURN IN A, AND CY=1
   529                        *  IF SPACE,CR OR COMMA CY=0
   530                        
   531                        * Routine:  RDOB
   532                        *
   533                        * Reg Used: ACC & X
   534                        * Var Used: TMP0
   535                        * Routines Called: GETCH,ASCBIN
   536                        * Returned Reg: Acc             X & Y REGS are PRESERVED
   537                        *
   538                        
   539 00:FCFD: DA           RDOB     PHX             SAVE X
   540 00:FCFE: 20 71 FC              JSR GETCH
   541 00:FD01: B0 34        	 BCS RDOB4       CNTRL 'C'
   542 00:FD03: C9 0D        	 CMP #$0D        CR?
   543 00:FD05: D0 03                 BNE RDOB1
   544                        
   545 00:FD07: 4C 18 F2     RDCR     JMP START       start resets stack to last BRK position
   546                        
   547 00:FD0A: C9 20        RDOB1    CMP #' '        CHK FOR SPACE
   548 00:FD0C: F0 04                 BEQ RDOB1A
   549 00:FD0E: C9 2C        	 CMP #','        CHK FOR COMMA
   550 00:FD10: D0 07                 BNE RDOB2
   551 00:FD12: 20 09 FC     RDOB1A   JSR SPAC        keep command line spacing constant
   552 00:FD15: A2 30        	 LDX #'0'        FILL WITH ZEREOS
   553                        *                        BOTH Acc & X REG NEED DATA IE '00'
   554 00:FD17: 80 12        	 BRA RDOB2A      PROCESS ALL ZEROS
   555                        
   556                        
   557 00:FD19: AA           RDOB2    TAX             SAVE 1ST CHAR IN X REG
  Wed Oct 18 2000 14:10                                                                                                    Page 73

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   558 00:FD1A: 20 71 FC     	 JSR GETCH       READ NEXT CHAR
   559 00:FD1D: B0 18        	 BCS RDOB4       ctrl-C OR ctrl-X
   560 00:FD1F: C9 0D        	 CMP #$0D        CR?
   561 00:FD21: F0 E4                 BEQ RDCR
   562 00:FD23: C9 2C        	 CMP #','        CK FOR COMMA DELIMITER
   563 00:FD25: F0 04                 BEQ RDOB2A
   564 00:FD27: C9 20        	 CMP #' '        SPACE DELIMETER
   565 00:FD29: D0 08                 BNE RDOB3
   566 00:FD2B: A9 30        RDOB2A   LDA #'0'
   567 00:FD2D: 20 39 FD     	 JSR ASCBIN      PROCESS ALL ZEROS
   568 00:FD30: 18                    CLC
   569 00:FD31: 80 04                 BRA RDOB4
   570                        
   571 00:FD33: 20 39 FD     RDOB3    JSR ASCBIN
   572 00:FD36: 38           	 SEC             CY=1
   573 00:FD37: FA           RDOB4    PLX             RESTORE X
   574 00:FD38: 60                    RTS
   575                        
   576                        
   577                        * Routine:  ASCBIN  ASCII TO BINARY
   578                        *
   579                        * Reg Used: ACC,X, and Y
   580                        * Var Used: TMP6
   581                        * Routines Called: HEXIN
   582                        * Returned Reg: Acc & X
   583                        *
   584 00:FD39: 20 FB FD     ASCBIN   JSR HEXIN       ACC & X REG HAVE DATA
   585                        *                        1ST CHAR IN X REG
   586 00:FD3C: 08                    PHP
   587 00:FD3D: 5A                    PHY
   588 00:FD3E: 78           	 SEI             DISABLE INTR SO WE CAN
   589 00:FD3F: A4 83        	 LDY TMP6        save TMP6 in Y
   590 00:FD41: 85 83        	 STA TMP6        USE VAR TMP6 AS TMP STORAGE
   591 00:FD43: 8A                    TXA
   592 00:FD44: 20 FB FD              JSR HEXIN
   593 00:FD47: 0A                    ASL A
   594 00:FD48: 0A                    ASL A
   595 00:FD49: 0A                    ASL A
   596 00:FD4A: 0A                    ASL A
   597 00:FD4B: 05 83                 ORA TMP6
   598 00:FD4D: 84 83        	 STY TMP6        restore TMP6
   599 00:FD4F: 7A                    PLY
   600 00:FD50: 28                    PLP
   601 00:FD51: 60                    RTS
   602                        
   603                        
   604                        	 PAGE
   605                        
  Wed Oct 18 2000 14:10                                                                                                    Page 74

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   606                        * Routine:  ACI_INIT
   607                        *
   608                        * Reg Used: ACC,Y,X
   609                        * Var Used: SOUTINDX,SOUTEND,SININDX,SINEND,ERRORS,SFLAG,TMP6,
   610                        * Routines Called: FLUSH_SERIAL_BUFF
   611                        * Returned Reg: NONE
   612                        *
   613                        *       Baud Rates          | For even parity, Y = 03
   614                        *                           | For Odd parity,  Y = 01
   615                        * 0     75 BAUD             | No parity, Y = 00 or 02
   616                        * 1    110 BAUD             |
   617                        * 2    150 BAUD             |
   618                        * 3    300 BAUD             | Data length in X is either
   619                        * 4    600 BAUD             | 8 for 8 bits, or anything
   620                        * 5   1200 BAUD             | else for 7 bits.
   621                        * 6   1800 BAUD             |
   622                        * 7   2400 BAUD             |
   623                        * 8   4800 BAUD             |
   624                        * 9   9600 BAUD             |
   625                        * A  19200 BAUD             |
   626                        * B  38400 BAUD             |
   627                        
   628                        
   629                        
   630             0000FD52   ACI_INIT EQU*           A=BAUD,X=DATA LENGTH,
   631                        *                        SETUP POINTERS
   632 00:FD52: 08           	 PHP             SAVE INTERUPT STATUS
   633 00:FD53: 78           	 SEI             DISABLE ANY IRQ'S
   634 00:FD54: 20 B4 FD              JSR FLUSH_SERIAL_BUFF
   635 00:FD57: 64 72                 STZ SFLAG
   636 00:FD59: 64 85        	 STZ ERRORS      CLR SERIAL ERROR COUNT
   637 00:FD5B: 5A           	 PHY             Y=PARITY
   638 00:FD5C: DA           	 PHX             DATA LENGTH
   639 00:FD5D: C9 0C        	 CMP #$0C        IS ACC VALID 75-38400
   640 00:FD5F: B0 5C                 BCS ACI_ERR
   641 00:FD61: 0A           	 ASL A           X2
   642 00:FD62: 85 83                 STA TMP6
   643 00:FD64: A4 86        	 LDY SPEED       MULT BY 11 FOR MAIN XTAL
   644 00:FD66: B9 F3 FE              LDA BAUDOFFSET,Y
   645 00:FD69: 18                    CLC
   646 00:FD6A: 65 83                 ADC TMP6
   647 00:FD6C: AA                    TAX
   648 00:FD6D: BD F9 FE     	 LDA ACIBAUD,X   SETUP COUNTERS
   649 00:FD70: 85 24                 STA TALL
   650 00:FD72: BD FA FE              LDA ACIBAUD+1,X
   651 00:FD75: 85 25                 STA TALH
   652 00:FD77: A9 20        	 LDA #$20        rev 2  Enable Receive - 7 Bit
   653 00:FD79: FA                    PLX
   654 00:FD7A: E0 08        	 CPX #$08        8 BIT?
   655 00:FD7C: D0 02                 BNE ACI_I1
   656 00:FD7E: 09 04        	 ORA #$04        SWITCH TO 8 BIT
   657 00:FD80: 85 83        ACI_I1   STA TMP6
   658 00:FD82: 68           	 PLA             GET PARITY WAS IN Y REG
   659 00:FD83: 2A                    ROL A
   660 00:FD84: 2A                    ROL A
   661 00:FD85: 2A                    ROL A
  Wed Oct 18 2000 14:10                                                                                                    Page 75

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   662 00:FD86: 05 83                 ORA TMP6
   663 00:FD88: 85 22                 STA ACSR
   664 00:FD8A: 20 91 FD              JSR SIOPORTS
   665 00:FD8D: 28                    PLP
   666 00:FD8E: A9 00                 LDA #$00
   667 00:FD90: 60                    RTS
   668                        
   669                        
   670                        
   671 00:FD91: A9 06        SIOPORTS LDA #$06        SET P62 RXD AS OUTPUT
   672 00:FD93: 04 21        	 TSB PDD6        AND TXD
   673 00:FD95: A9 01                 LDA #$01
   674 00:FD97: 14 21        	 TRB PDD6        SET RXD AS INPUT
   675 00:FD99: A9 02        	 LDA #$02        SET TXD TO DEFAULT MARK
   676 00:FD9B: 04 20        	 TSB PD6         TELL OTHER GUY TO XMIT
   677 00:FD9D: A9 04        	 LDA #$04        SERIAL DATA TO ME
   678 00:FD9F: 14 20                 TRB PD6
   679 00:FDA1: A9 80        	 LDA #$80        P47 AS INPUT
   680 00:FDA3: 14 1E        	 TRB PDD4        SETUP PORTS
   681 00:FDA5: A9 08        	 LDA #$08        ENABLE NE47
   682 00:FDA7: 04 2D                 TSB IER1
   683 00:FDA9: A9 02        	 LDA #$02        SET PORT 44-47
   684 00:FDAB: 04 1B        	 TSB BCR         ENABLED
   685 00:FDAD: A9 0E        	 LDA #$0E        SETUP SERIAL IRQS
   686 00:FDAF: 85 0A                 STA TCR1
   687 00:FDB1: 64 23        	 STZ ARTD        SET DATA TO NULL
   688 00:FDB3: 60                    RTS
   689                        
   690                        
   691             0000FDB4   FLUSH_SERIAL_BUFF EQU*  ARTD ERROR
   692 00:FDB4: 64 73        	 STZ SOUTINDX    SETUP QUEUE COUNTERS TO ZERO
   693 00:FDB6: 64 74        	 STZ SOUTEND     IE FLUSH ALL SERIAL QUEUES
   694 00:FDB8: 64 75                 STZ SININDX
   695 00:FDBA: 64 76                 STZ SINEND
   696 00:FDBC: 60                    RTS
   697                        
   698                        
   699                        
   700             0000FDBD   ACI_ERR  EQU*
   701 00:FDBD: FA                    PLX
   702 00:FDBE: 7A                    PLY
   703 00:FDBF: A9 04        	 LDA #DTR        TELL OTHER GUY TO XMIT
   704 00:FDC1: 14 20        	 TRB PD6         SERIAL DATA TO ME
   705 00:FDC3: 28                    PLP
   706 00:FDC4: A9 FF                 LDA #$FF
   707 00:FDC6: 60                    RTS
   708                        
   709                        
   710                        	 PAGE
   711                        
  Wed Oct 18 2000 14:10                                                                                                    Page 76

    'W65C134 Internal ROM Monitor ($F000)'
    'MON5.ASM - Serial Routines'

   712                        * Routine:  TGLXONMODE
   713                        *
   714                        * Reg Used: ACC,Y,X
   715                        * Var Used: TMPC,TMP0
   716                        * Routines Called: REGTTL,WRPC,SETR,SPAC,WROB
   717                        * Returned Reg: NONE
   718                        *
   719                        
   720                        
   721             0000FDC7   TGLXONMODE EQU*         TOGGLE SERIAL XON/XOFF MODE
   722 00:FDC7: 78                    SEI
   723 00:FDC8: A5 72                 LDA SFLAG
   724 00:FDCA: 49 04                 EOR #XONOFLG
   725 00:FDCC: 89 04                 BIT #XONOFLG
   726 00:FDCE: F0 0C                 BEQ TGLXONA
   727 00:FDD0: 29 B7                 AND #$FF-SXOFFLG-SNDOVF
   728 00:FDD2: 09 90                 ORA #SXONFLG+LASTXONOF
   729 00:FDD4: 85 72                 STA SFLAG
   730 00:FDD6: A9 08        	 LDA #$08        DISABLE NE47
   731 00:FDD8: 14 2D                 TRB IER1
   732 00:FDDA: 80 08                 BRA TGLXONB
   733                        
   734 00:FDDC: 29 27        TGLXONA  AND #$FF-SXONFLG-SXOFFLG-SNDOVF-LASTXONOF
   735 00:FDDE: 85 72                 STA SFLAG
   736 00:FDE0: A9 08        	 LDA #$08        ENABLE NE47
   737 00:FDE2: 04 2D                 TSB IER1
   738 00:FDE4: A9 04        TGLXONB  LDA #$04        DTR LOW
   739 00:FDE6: 14 20                 TRB PD6
   740 00:FDE8: 58                    CLI
   741 00:FDE9: 60                    RTS
   742                        
   743                        	 ENDS
   744                        
     1                        	 STTL 'MON6.ASM - Library Subroutines'
     2                        	 PAGE
     3                        *        06-21-1993
  Wed Oct 18 2000 14:10                                                                                                    Page 77

    'W65C134 Internal ROM Monitor ($F000)'
    'MON6.ASM - Library Subroutines'

     4                        	 CODE
     5                        
     6             0000007B   DVDN     EQU TMP0
     7             0000007E   DVSR     EQU TMP2
     8             00000081   RMNDR    EQU TMP4
     9                        *
    10                        * MOVE A BLOCK OF DATA'
    11                        *
    12                        * 08-21-1988
    13                        
    14                        
    15                        
    16                        * SRCE--ADDRESS OF SOURCE BLOCK
    17                        * DEST--ADDRESS OF DESTINATION BLOCK
    18                        * Y--# OF BYTES TO BE MOVED
    19                        *  Y=0 IS TO MOVE 256 BYTES
    20                        * WARNING: TWO MEMORY AREAS MUST NOT OVER LAP
    21                        *  CY = 1 IF MEMORY NOT THERE
    22                        
    23 00:FDEA: 88           MVDATA   DEY             DEC INDEX
    24 00:FDEB: B1 7B        	 LDA (SRCE),Y    GET SOURCE BYTE
    25 00:FDED: 91 7E        	 STA (DEST),Y    STORE DATA
    26 00:FDEF: D1 7E        	 CMP (DEST),Y    CK IF WRITTEN
    27 00:FDF1: D0 06                 BNE MVBAD
    28 00:FDF3: C0 00        	 CPY #$00        ARE WE DONE
    29 00:FDF5: D0 F3        	 BNE MVDATA      NOT DONE
    30 00:FDF7: 18           	 CLC             GOOD MOVE
    31 00:FDF8: 60           	 RTS             RETURN
    32                        
    33 00:FDF9: 38           MVBAD    SEC
    34 00:FDFA: 60                    RTS
    35                        
    36                        
    37                        
    38                        *
    39                        *     CONVERTS ASCII HEX TO HEX
    40                        *
    41                        
    42                        * 01-19-1989
    43                        
    44                        
    45                        *  Routine:  HEXIN
    46                        *    IF CARRY SET THEN NOT ASCII HEX
    47                        *    ACC IN AND OUTPUT
    48                        *  Reg Used: Acc
    49                        *  Var Used: NONE
    50                        *  Routines Called: ISHEX
    51                        *  Returned Reg: Acc
    52                        *
    53                        
    54                        
    55 00:FDFB: 20 0B FE     HEXIN    JSR ISHEX       IS IT HEX
    56 00:FDFE: B0 0A                 BCS HEXXX
    57 00:FE00: C9 3A                 CMP #$3A
    58 00:FE02: 08           	 PHP             SAVE STATUS
    59 00:FE03: 29 0F        	 AND #$0F        STRIP OF LS NIBBLE
  Wed Oct 18 2000 14:10                                                                                                    Page 78

    'W65C134 Internal ROM Monitor ($F000)'
    'MON6.ASM - Library Subroutines'

    60 00:FE05: 28           	 PLP             GET STAT
    61 00:FE06: 90 02        	 BCC HEXXX       WAS NUMBER
    62 00:FE08: 69 08        	 ADC #$08        WAS ALPHA ADD 8+CY=9
    63 00:FE0A: 60           HEXXX    RTS
    64                        
    65                        
    66                        *  Routine:  ISHEX
    67                        *    TESTS FOR VALID ASCII HEX DIGIT
    68                        *    C=SET IF NOT HEX
    69                        *  Reg Used: Acc
    70                        *  Var Used: NONE
    71                        *  Routines Called: UPPER_CASE
    72                        *  Returned Reg: Acc
    73                        
    74 00:FE0B: 20 25 FE     ISHEX    JSR UPPER_CASE  IF NOT MAKE UPPER CASE
    75 00:FE0E: C9 41        	 CMP #'A'        LESS THAN 'A'
    76 00:FE10: 90 03        	 BCC ISDECIMAL   YES,TRY NUMBER CHECK
    77 00:FE12: C9 47        	 CMP #'G'        F+1
    78                        *                        IF CY SET THEN GREATER THAN F
    79 00:FE14: 60           	 RTS             IF CY CLR THEN OK
    80                        
    81                        
    82                        *  Routine:  ISDECIMAL
    83                        *    CHECK FOR VALID ASCII #
    84                        *  Reg Used: Acc
    85                        *  Var Used: NONE
    86                        *  Routines Called: NONE
    87                        *  Returned Reg: Acc
    88                        
    89 00:FE15: C9 30        ISDECIMAL CMP #'0'       IS LESS THAN '0'
    90 00:FE17: 90 03        	 BCC ISN1        YES,NG
    91 00:FE19: C9 3A        	 CMP #'9'+1      IE >9
    92                        *                        IF CY SET THEN NG
    93 00:FE1B: 60           	 RTS             IF CY CLR THEN OK
    94                        
    95 00:FE1C: 38           ISN1     SEC             BAD GUYS EXIT
    96 00:FE1D: 60                    RTS
    97                        
    98                        
    99                        *  Routine:  IFASC
   100                        *    CHECK FOR VALID ASCII
   101                        *  Reg Used: Acc
   102                        *  Var Used: NONE
   103                        *  Routines Called: ISHEX
   104                        *  Returned Reg: Acc
   105                        
   106 00:FE1E: C9 20        IFASC    CMP #' '        IS LESS THAN SPACE
   107 00:FE20: 90 FA        	 BCC ISN1        YES SO NOT ASCII
   108 00:FE22: C9 7F        	 CMP #$7F        GT TILDA
   109                        *                        IF CY SET THEN SO NOT ASCII
   110 00:FE24: 60           	 RTS             IF CY CLR THEN OK
   111                        
   112                        
   113                        
   114                        *  Routine:  UPPER_CASE
   115                        *  Reg Used: Acc
  Wed Oct 18 2000 14:10                                                                                                    Page 79

    'W65C134 Internal ROM Monitor ($F000)'
    'MON6.ASM - Library Subroutines'

   116                        *  Var Used: NONE
   117                        *  Routines Called: NONE
   118                        *  Returned Reg: Acc
   119                        
   120                        
   121 00:FE25: C9 61        UPPER_CASE CMP #'a'      CONVERT TO UPPER CASE
   122 00:FE27: 90 07        	 BCC NIBBIN1     NOT an upper case char
   123 00:FE29: C9 7B        	 CMP #'z'+1      IS IT GT A 'z'
   124 00:FE2B: B0 03        	 BCS NIBBIN1     NOT an upper case char
   125 00:FE2D: 38                    SEC
   126 00:FE2E: E9 20        	 SBC #$20        MAKE IT UPPER CASE
   127 00:FE30: 60           NIBBIN1  RTS
   128                        
   129                        
   130                        
   131                        *  Routine:  BIN2DEC
   132                        *  Reg Used: Acc
   133                        *  Var Used: NONE
   134                        *  Routines Called: NONE
   135                        *  Returned Reg: Acc
   136                        
   137                        
   138 00:FE31: DA           BIN2DEC  PHX              convert Acc to packed decimal (MAX 99)
   139 00:FE32: 48                    PHA
   140 00:FE33: 4A                    LSR A
   141 00:FE34: 4A                    LSR A
   142 00:FE35: 4A                    LSR A
   143 00:FE36: 4A                    LSR A
   144 00:FE37: AA                    TAX
   145 00:FE38: F8                    SED
   146 00:FE39: 68                    PLA
   147 00:FE3A: 29 0F                 AND #$0F
   148 00:FE3C: 48                    PHA
   149 00:FE3D: BD C1 FF              LDA BINDECH,X
   150 00:FE40: 18                    CLC
   151 00:FE41: FA                    PLX
   152 00:FE42: 7D B1 FF              ADC BINDECL,X
   153 00:FE45: D8                    CLD
   154 00:FE46: FA                    PLX
   155 00:FE47: 60                    RTS
   156                        
   157                        	 ENDS
   158                        
     1                        	 STTL 'MON7.ASM - Special interrupts - Power Down'
     2                        	 PAGE
     3                        *        06-23-1993
  Wed Oct 18 2000 14:10                                                                                                    Page 80

    'W65C134 Internal ROM Monitor ($F000)'
    'MON7.ASM - Special interrupts - Power Down'

     4                        	 CODE
     5                        
     6             0000FE48   NE46 EQU *               POWER FAIL PENDING
     7 00:FE48: 6C 4C 00     	 JMP (|UNE46)
     8                        
     9                        
    10                        *  POWER DOWN:
    11                        
    12                        *  When we get a power down interrupt, we come here.  We shut down all
    13                        *  interrupts (except TOD clock), and clear any that were pending.
    14                        *  we reset the stack to FF, we write a semiphore into RAM to indicate that
    15                        *  we are powered down, and we run the power down routine. We slow down then
    16                        *  shut off the fast clock.  We turn all i/o ports to inputs.
    17                        
    18                        *  The power down routine executes the time of day interrupt, then checks RAM
    19                        *  for a semiphore indicating that there is a low power routine in RAM.
    20                        *  If there is we JSR to $0088.  The RAM routine can do anything it likes and
    21                        *  returns with a RTS.
    22                        
    23                        *  After the RTS (or after deciding there is no RAM routine) we check for
    24                        *  power back up.  If power has returned to the system, we bring up a few
    25                        *  key registers then jump to RESET.
    26                        
    27                        *  If a physical reset occurs while we are powered down, we must return to
    28                        *  the power down code w/out restarting anything on the bus.  We use the first
    29                        *  semiphore above to flag this condition.
    30                                 
    31                        *  IMPORTANT SEMIPHORES:
    32                        
    33                        *  If we are in low power mode, locations $7B = $55, $7C = $AA, $7D = $88.
    34                        *  This is checked by RESET.
    35                        
    36                        *  If there is a valid routine in RAM, it starts at $0088, and locations
    37                        *  $7E = $55, $7F = $AA. If that is the case, the low power
    38                        *  routine will jsr to $0088 once per second.
    39                        
    40                        *  RAM LOCATIONS:
    41                        
    42                        *  RAM locations F8-FF are used for the stack to do the TOD interrupt.
    43                        
    44                        *  $40 - $87  remain through power down  don't mess with them.
    45                        
    46                        
    47                        
    48             0000FE4B   PDOWN    EQU *           GOTO LOW POWER MODE
    49                        
    50 00:FE4B: A9 55        	 LDA #$55        set the LP semiphore
    51 00:FE4D: 85 7B        	 STA <$7B
    52 00:FE4F: A9 AA                 LDA #$AA
    53 00:FE51: 85 7C        	 STA <$7C
    54 00:FE53: A9 88                 LDA #$88
    55 00:FE55: 85 7D        	 STA <$7D
    56                        
    57 00:FE57: A9 7A        	 LDA #%01111010  DISABLE EDGE IRQ'S
    58 00:FE59: 14 1B        	 TRB BCR         DISABLE NMI & IRQ'S
    59                        
  Wed Oct 18 2000 14:10                                                                                                    Page 81

    'W65C134 Internal ROM Monitor ($F000)'
    'MON7.ASM - Special interrupts - Power Down'

    60 00:FE5B: 64 2D        	 STZ IER1        DISABLE INTERRUPTS
    61 00:FE5D: A9 FF                 LDA #$FF
    62 00:FE5F: 85 2C        	 STA IFR1        RESET ANY INTERRUPTS
    63                        
    64 00:FE61: A9 20        	 LDA #$20        ENABLE ONLY T2
    65 00:FE63: 85 09                 STA IER2
    66                        
    67 00:FE65: A9 DF                 LDA #$DF
    68 00:FE67: 04 08        	 TSB IFR2        RESET ANY EXCEPT T2
    69                        
    70 00:FE69: A9 F8        	 LDA #<TODIRQ    MAKE TOD CLK INTERNAL
    71 00:FE6B: 85 48                 STA UIRQT2
    72 00:FE6D: A9 F8                 LDA #>TODIRQ
    73 00:FE6F: 85 49                 STA UIRQT2+1
    74                        
    75 00:FE71: 64 22        	 STZ ACSR        DISABLE REC & XMIT SERIAL
    76                        
    77 00:FE73: A5 23        	 LDA ARTD        RESET ANY SERIAL READS
    78 00:FE75: 64 23        	 STZ ARTD        RESET ANY SERIAL WRITES
    79                        
    80 00:FE77: 64 1C        	 STZ PD4         PUT ALL PORTS LOW
    81 00:FE79: 64 1D                 STZ PD5
    82 00:FE7B: 64 20                 STZ PD6
    83 00:FE7D: 64 1E        	 STZ PDD4        RESET PORTS TO INPUTS
    84 00:FE7F: 64 1F                 STZ PDD5
    85 00:FE81: 64 21                 STZ PDD6
    86                        
    87 00:FE83: A9 18        	 LDA #$18        T1 DISABLE, LEAVE T2 (TOD)
    88 00:FE85: 85 0B                 STA TCR2
    89                        
    90 00:FE87: A9 04        	 LDA #%00000100  shift to slow clock
    91 00:FE89: 85 0A                 STA TCR1
    92                        
    93 00:FE8B: A9 00        	 LDA #$00        WAIT UNTIL SLOW CLOCK
    94 00:FE8D: 3A           PDLP1    DEC A           CAN TAKE EFFECT
    95 00:FE8E: D0 FD                 BNE PDLP1            
    96                        
    97 00:FE90: 64 0A        	 STZ TCR1        fast clock is now OFF
    98                        
    99                        	 IFDEF IROM
   100 00:FE92: 64 1B        	 STZ BCR         GO TO ALL INTERNAL
   101                        	 ELSE
   102                        	 LDA #$81
   103                        	 STA BCR         for test
   104                        	 ENDIF
   105                        
   106 00:FE94: 64 07        	 STZ PCS3        kill CS outputs
   107                        	 IFDEF IROM
   108 00:FE96: 64 03        	 STZ PD3         internal ROM, set all output to 0
   109                        	 ELSE
   110                        	 LDA #$FF
   111                        	 STA PD3         external ROM, set all high CS outs
   112                        	 ENDIF
   113                        
   114 00:FE98: A2 FF        	 LDX #$FF        RESET STACK TO INTERNAL
   115 00:FE9A: 9A                    TXS
  Wed Oct 18 2000 14:10                                                                                                    Page 82

    'W65C134 Internal ROM Monitor ($F000)'
    'MON7.ASM - Special interrupts - Power Down'

   116                        
   117 00:FE9B: 64 30        	 STZ PD0         PUT ALL PORTS LOW
   118 00:FE9D: 64 31                 STZ PD1
   119 00:FE9F: 64 32                 STZ PD2
   120 00:FEA1: 64 34        	 STZ PDD0        RESET PORTS TO INPUTS
   121 00:FEA3: 64 35                 STZ PDD1
   122 00:FEA5: 64 36                 STZ PDD2
   123                        
   124 00:FEA7: A9 20        NE46LP1  LDA #PUFLG      set flag to indicate
   125 00:FEA9: 14 77        	 TRB DISPTYP     we haven't seen any
   126                        *                        power up yet.
   127                        
   128 00:FEAB: 58                    CLI
   129                        
   130 00:FEAC: DB           NE46LP   BYTE $DB       STOP until Interrupt
   131 00:FEAD: EA                    NOP
   132                        
   133                        * We get here after doing a TOD Interrupt
   134                        
   135                        
   136                        
   137 00:FEAE: A5 7E        	 LDA <$7E
   138 00:FEB0: C9 55                 CMP #$55
   139 00:FEB2: D0 09                 BNE NORAMRT
   140 00:FEB4: A5 7F        	 LDA <$7F
   141 00:FEB6: C9 AA                 CMP #$AA
   142 00:FEB8: D0 03                 BNE NORAMRT
   143 00:FEBA: 20 88 00     	 JSR $0088       JSR to RAM routine
   144                        
   145 00:FEBD: A5 1C        NORAMRT  LDA PD4         CK PD46 FOR POWER UP
   146 00:FEBF: 89 40                 BIT #$40             
   147 00:FEC1: F0 E4        	 BEQ NE46LP1     reset PUP flag if Necss.
   148                        
   149 00:FEC3: A9 20        	 LDA #PUFLG      SET 1ST TIME FLG
   150 00:FEC5: 04 77        	 TSB DISPTYP     NOTICED PU FLG
   151 00:FEC7: F0 E3        	 BEQ NE46LP      a debounce of 2
   152                                 
   153                        
   154                        * POWER BACK UP - Restart system
   155                        
   156                        
   157                        
   158 00:FEC9: 64 7B        	 STZ <$7B         CLEAR ALL SEMIPHORES
   159 00:FECB: 64 7C        	 STZ <$7C
   160 00:FECD: 64 7D        	 STZ <$7D
   161 00:FECF: 64 7E        	 STZ <$7E
   162 00:FED1: 64 7F        	 STZ <$7F
   163                        
   164 00:FED3: 6C FC FF              JMP ($FFFC)
   165                        
   166                        
   167                        
   168             0000FED6   PE44     EQU *
   169             0000FED6   PE45     EQU *
   170             0000FED6   PE50     EQU *
   171             0000FED6   PE51     EQU *
  Wed Oct 18 2000 14:10                                                                                                    Page 83

    'W65C134 Internal ROM Monitor ($F000)'
    'MON7.ASM - Special interrupts - Power Down'

   172             0000FED6   NE52     EQU *
   173             0000FED6   NE53     EQU *
   174             0000FED6   IRQRESERVED EQU *
   175             0000FED6   PE54     EQU *
   176             0000FED6   PE55     EQU *
   177             0000FED6   PE56     EQU *
   178             0000FED6   NE57     EQU *
   179             0000FED6   GENIRQ   EQU *
   180 00:FED6: 6C 4E 00     	 JMP (|UGENIRQ)
   181                        
   182                        
   183                        
   184 00:FED9: 6C 4A 00     IRQT1    JMP (|UIRQT1)
   185                        
   186                        
   187 00:FEDC: 6C 48 00     IRQT2    JMP (|UIRQT2)
   188                        
   189                        
   190 00:FEDF: 6C 46 00     IRQ1     JMP (|UIRQ1)
   191                        
   192                        
   193 00:FEE2: 6C 44 00     IRQ2     JMP (|UIRQ2)
   194                        
   195                        
   196 00:FEE5: 6C 42 00     NMIRQ    JMP (|UNMI)
   197                        
   198                        
   199                        
   200 00:FEE8: 6C 40 00     IRQBRK   JMP (|UBRK)
   201                        
   202                        
   203                        
   204             0000FEF3   TABLE_START EQU $FEF3
   205                        
   206                        
   207             00000008   ZZZSPACE EQU TABLE_START-*      gives space left in the ROM
   208                        
   209             0000FEEC   LASTBYTE EQU *+1
   210                        	 ENDS
   211                        	 STTL 'MON7.ASM - GENERAL LOOKUP TABLES'
   212                        	 PAGE
   213                        	 DATA
  Wed Oct 18 2000 14:10                                                                                                    Page 84

    'W65C134 Internal ROM Monitor ($F000)'
    'MON7.ASM - GENERAL LOOKUP TABLES'

   214                        	 ORG TABLE_START
   215                        
   216             0000FEF3   BAUDOFFSET EQU *
   217 00:FEF3: 00           	 BYTE 00        2.0000MHZ
   218 00:FEF4: 18           	 BYTE 24        4.0000MHZ
   219 00:FEF5: 30           	 BYTE 48        2.4576MHZ
   220 00:FEF6: 48           	 BYTE 72        3.6864MHZ
   221 00:FEF7: 60           	 BYTE 96        1.8432MHZ
   222 00:FEF8: 78           	 BYTE 120       4.9125 MHZ
   223                        
   224                        
   225                        
   226                        
   227             0000FEF9   ACIBAUD  EQU *
   228                        *                         2MHZ
   229 00:FEF9: 82 06        	 WORD $0682        75 BAUD
   230 00:FEFB: 6F 04        	 WORD $046F       110 BAUD
   231 00:FEFD: 40 03        	 WORD $0340       150 BAUD
   232 00:FEFF: A0 01        	 WORD $01A0       300 BAUD
   233 00:FF01: CF 00        	 WORD $00CF       600 BAUD
   234 00:FF03: 67 00        	 WORD $0067      1200 BAUD
   235 00:FF05: 44 00        	 WORD $0044      1800 BAUD
   236 00:FF07: 33 00        	 WORD $0033      2400 BAUD
   237 00:FF09: 19 00        	 WORD $0019      4800 BAUD
   238 00:FF0B: 0C 00        	 WORD $000C      9600 BAUD DOES NOT WORK RELIABLY
   239 00:FF0D: 06 00        	 WORD $0006     19200 BAUD BAD WONT WORK AT 2MHZ
   240 00:FF0F: 02 00        	 WORD $0002     38400 BAUD BAD WONT WORK AT 2MHZ
   241                        
   242                        *                        4MHZ
   243 00:FF11: 04 0D        	 WORD $0D04        75 BAUD
   244 00:FF13: E0 08        	 WORD $08E0       110 BAUD
   245 00:FF15: 82 06        	 WORD $0682       150 BAUD
   246 00:FF17: 40 03        	 WORD $0340       300 BAUD
   247 00:FF19: A0 01        	 WORD $01A0       600 BAUD
   248 00:FF1B: CF 00        	 WORD $00CF      1200 BAUD
   249 00:FF1D: 8A 00        	 WORD $008A      1800 BAUD
   250 00:FF1F: 67 00        	 WORD $0067      2400 BAUD
   251 00:FF21: 33 00        	 WORD $0033      4800 BAUD
   252 00:FF23: 19 00        	 WORD $0019      9600 BAUD
   253 00:FF25: 0C 00        	 WORD $000C     19200 BAUD
   254 00:FF27: 06 00        	 WORD $0006     38400 BAUD BAD WONT WORK AT 2MHZ
   255                        
   256                        *                        2.4576MHZ
   257 00:FF29: FF 07        	 WORD $07FF        75 BAUD
   258 00:FF2B: 73 05        	 WORD $0573       110 BAUD
   259 00:FF2D: FF 03        	 WORD $03FF       150 BAUD
   260 00:FF2F: FF 01        	 WORD $01FF       300 BAUD
   261 00:FF31: FF 00        	 WORD $00FF       600 BAUD
   262 00:FF33: 7F 00        	 WORD $007F      1200 BAUD
   263 00:FF35: 54 00        	 WORD $0054      1800 BAUD
   264 00:FF37: 3F 00        	 WORD $003F      2400 BAUD
   265 00:FF39: 1F 00        	 WORD $001F      4800 BAUD
   266 00:FF3B: 0F 00        	 WORD $000F      9600 BAUD
   267 00:FF3D: 07 00        	 WORD $0007     19200 BAUD
   268 00:FF3F: 03 00        	 WORD $0003     38400 BAUD
   269                        
  Wed Oct 18 2000 14:10                                                                                                    Page 85

    'W65C134 Internal ROM Monitor ($F000)'
    'MON7.ASM - GENERAL LOOKUP TABLES'

   270                        *                 3.6864MHZ
   271 00:FF41: FF 0B        	 WORD $0BFF        75 BAUD
   272 00:FF43: 2E 08        	 WORD $082E       110 BAUD
   273 00:FF45: FF 05        	 WORD $05FF       150 BAUD
   274 00:FF47: FF 02        	 WORD $02FF       300 BAUD
   275 00:FF49: 7F 01        	 WORD $017F       600 BAUD
   276 00:FF4B: BF 00        	 WORD $00BF      1200 BAUD
   277 00:FF4D: 7F 00        	 WORD $007F      1800 BAUD
   278 00:FF4F: 5F 00        	 WORD $005F      2400 BAUD
   279 00:FF51: 2F 00        	 WORD $002F      4800 BAUD
   280 00:FF53: 17 00        	 WORD $0017      9600 BAUD
   281 00:FF55: 0B 00        	 WORD $000B     19200 BAUD
   282 00:FF57: 05 00        	 WORD $0005     38400 BAUD
   283                        
   284                        *                        1.8432MHZ
   285 00:FF59: FF 05        	 WORD $05FF        75 BAUD
   286 00:FF5B: 16 04        	 WORD $0416       110 BAUD
   287 00:FF5D: FF 02        	 WORD $02FF       150 BAUD
   288 00:FF5F: 7F 01        	 WORD $017F       300 BAUD
   289 00:FF61: BF 00        	 WORD $00BF       600 BAUD
   290 00:FF63: 5F 00        	 WORD $005F      1200 BAUD
   291 00:FF65: 3F 00        	 WORD $003F      1800 BAUD
   292 00:FF67: 2F 00        	 WORD $002F      2400 BAUD
   293 00:FF69: 17 00        	 WORD $0017      4800 BAUD
   294 00:FF6B: 0B 00        	 WORD $000B      9600 BAUD
   295 00:FF6D: 05 00        	 WORD $0005     19200 BAUD
   296 00:FF6F: 02 00        	 WORD $0002     38400 BAUD
   297                        
   298                        
   299                        *                        4.9152MHZ
   300 00:FF71: FF 0F        	 WORD $0FFF        75 BAUD
   301 00:FF73: E8 0A        	 WORD $0AE8       110 BAUD
   302 00:FF75: FF 07        	 WORD $07FF       150 BAUD
   303 00:FF77: FF 03        	 WORD $03FF       300 BAUD
   304 00:FF79: FF 01        	 WORD $01FF       600 BAUD
   305 00:FF7B: FF 00        	 WORD $00FF      1200 BAUD
   306 00:FF7D: AA 00        	 WORD $00AA      1800 BAUD
   307 00:FF7F: 7F 00        	 WORD $007F      2400 BAUD
   308 00:FF81: 3F 00        	 WORD $003F      4800 BAUD
   309 00:FF83: 1F 00        	 WORD $001F      9600 BAUD
   310 00:FF85: 0F 00        	 WORD $000F     19200 BAUD
   311 00:FF87: 07 00        	 WORD $0007     38400 BAUD
   312                        
   313                        
   314                        
   315                        
   316                        
   317                        * TIME OF DAY MAX MIN TABLES
   318                        
   319                        
   320             0000FF89   MAXTTBL  EQU *
   321 00:FF89: 3C           	 BYTE 60        MIN
   322 00:FF8A: 18           	 BYTE 24        HR
   323 00:FF8B: 20           	 BYTE 32        DAY
   324 00:FF8C: 0D           	 BYTE 13        MONTH
   325 00:FF8D: 64           	 BYTE 100       YR
  Wed Oct 18 2000 14:10                                                                                                    Page 86

    'W65C134 Internal ROM Monitor ($F000)'
    'MON7.ASM - GENERAL LOOKUP TABLES'

   326 00:FF8E: 08           	 BYTE 8         DAY OF WEEK
   327                        
   328             0000FF8F   MINTTBL  EQU *
   329 00:FF8F: 00           	 BYTE 0         MIN
   330 00:FF90: 00           	 BYTE 0         HR
   331 00:FF91: 01           	 BYTE 1         DAY
   332 00:FF92: 01           	 BYTE 1         MONTH
   333 00:FF93: 00           	 BYTE 0         YR
   334 00:FF94: 01           	 BYTE 1         DAY OF WEEK
   335                        
   336                        
   337 00:FF95: 1F           LASTDY   BYTE 31        JANUARY
   338 00:FF96: 1C           	 BYTE 28        FEBRUARY-EXCEPT LEAP YR
   339 00:FF97: 1F           	 BYTE 31        MARCH
   340 00:FF98: 1E           	 BYTE 30        APRIL
   341 00:FF99: 1F           	 BYTE 31        MAY
   342 00:FF9A: 1E           	 BYTE 30        JUNE
   343 00:FF9B: 1F           	 BYTE 31        JULY
   344 00:FF9C: 1F           	 BYTE 31        AUGUST
   345 00:FF9D: 1E           	 BYTE 30        SEPTEMBER
   346 00:FF9E: 1F           	 BYTE 31        OCTOBER
   347 00:FF9F: 1E           	 BYTE 30        NOVEMBER
   348 00:FFA0: 1F           	 BYTE 31        DECEMBER
   349                        
   350 00:FFA1: 00           DFLTS    BYTE 0         SEC
   351 00:FFA2: 00           	 BYTE 00        MINUTES
   352 00:FFA3: 0C           	 BYTE 12        HOUR
   353 00:FFA4: 04           	 BYTE 04        DAY
   354 00:FFA5: 07           	 BYTE 07        MONTH
   355 00:FFA6: 5D           	 BYTE 93        YEAR
   356 00:FFA7: 01           	 BYTE 1         DAY OF WEEK
   357 00:FFA8: 00           	 BYTE 0         DAYLIGHT SAVING OFF
   358             0000FFA9   DFLTSEND EQU *
   359                        
   360                        
   361                           STTL 'CONVERSION TABLES
   362                        
   363             0000FFA9   HEXTOPOS EQU *
   364 00:FFA9: 01 02 04 08  	 BYTE $01,$02,$04,$08
   365 00:FFAD: 10 20 40 80  	 BYTE $10,$20,$40,$80
   366                        
   367                        
   368             0000FFB1   BINDECL  EQU *
   369 00:FFB1: 00 01 02 03  	 BYTE $00,$01,$02,$03,$04,$05,$06,$07,$08,$09
       00:FFB5: 04 05 06 07 
       00:FFB9: 08 09 
   370 00:FFBB: 10 11 12 13  	 BYTE $10,$11,$12,$13,$14,$15
       00:FFBF: 14 15 
   371                        
   372 00:FFC1: 00 16 32 48  BINDECH  BYTE $00,$16,$32,$48,$64,$80,$96
       00:FFC5: 64 80 96 
   373                        	 PAGE
   374                        
  Wed Oct 18 2000 14:10                                                                                                    Page 87

    'W65C134 Internal ROM Monitor ($F000)'
    'CONVERSION TABLES

   375 00:FFC8: F8 F8        	 WORD TODIRQ    MONITOR TOD IRQ PTR
   376 00:FFCA: FC F1        	 WORD MONBRK    MONITOR BREAK IRQ PTR
   377 00:FFCC: 4B FE        	 WORD PDOWN     POWER DOWN IRQ PTR
   378 00:FFCE: 33 F2        	 WORD S0        JMP INTO MONITOR CMD PARSER
   379 00:FFD0: D6 FE        	 WORD PE44
   380                        
   381 00:FFD2: D6 FE        	 WORD PE45
   382 00:FFD4: 48 FE        	 WORD NE46
   383 00:FFD6: B9 FB        	 WORD NE47
   384 00:FFD8: D6 FE        	 WORD PE50
   385 00:FFDA: D6 FE        	 WORD PE51
   386 00:FFDC: D6 FE        	 WORD NE52
   387 00:FFDE: D6 FE        	 WORD NE53
   388 00:FFE0: D6 FE        	 WORD IRQRESERVED
   389 00:FFE2: D6 FE        	 WORD IRQRESERVED
   390 00:FFE4: 2E FB        	 WORD IRQAT
   391 00:FFE6: 91 FA        	 WORD IRQAR
   392 00:FFE8: D6 FE        	 WORD IRQRESERVED
   393 00:FFEA: D6 FE        	 WORD PE54
   394 00:FFEC: D6 FE        	 WORD PE55
   395 00:FFEE: D6 FE        	 WORD PE56
   396 00:FFF0: D6 FE        	 WORD NE57
   397                        
   398 00:FFF2: D9 FE        	 WORD IRQT1
   399 00:FFF4: DC FE        	 WORD IRQT2
   400 00:FFF6: DF FE        	 WORD IRQ1
   401 00:FFF8: E2 FE        	 WORD IRQ2
   402 00:FFFA: E5 FE        	 WORD NMIRQ
   403 00:FFFC: 8F F0        	 WORD RESET
   404 00:FFFE: E8 FE        	 WORD IRQBRK
   405                        
   406                        	 IFTRUE LASTBYTE.UGT.BAUDOFFSET
   407                        	 EXIT
   408                        	 ENDIF
   409                        
   410 01:0000:              	 ENDS


      Lines assembled: 3851
      Errors: 0
